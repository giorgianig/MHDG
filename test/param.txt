&SWITCH_LST
    steady              = .false.       ! Is it a steady state simulation?
                                        ! .false. = time evolving simulation
                                        ! .true.  = steady state simulation
    axisym              = .true.        ! Is it an axisymmetric simulation?
                                        ! true = yes (even for magnetic perturbation)
                                        ! false = no
    init                = 1             ! Initialization type: 1-analytical at nodes; 2-L2 projection
    driftdia            = .false.       ! Set to FALSE to ignore diamagnetic drifts terms
    driftexb            = .false.       ! Set to FALSE to ignore ExB drifts terms
    testcase            = 80            ! Determine the analytical solution and the body forces
    RMP                 = .false.       ! True to set RMP (non-axisymetrical perturbation)
    Ripple              = .false.       ! True to set Ripple (non-axisymetrical perturbation)
    psdtime             = .true.        ! Reduce the diffusion every time we reach the steady state
                                        ! condition (only works if steady=.false.)
    diffred             = 0.687656021   ! Reduction factor of the diffusion for psdtime simulation (set for 20*diff_x)
    diffmin             = 0.5           ! Minimum value of the diffusion for a psdtime simulation
    shockcp             = 0             ! Shock capturing option
                                        ! 0 - No shock capturing
                                        ! 1 - Constant in each element
                                        ! 2 - Linear interpolation between nodes
                                        ! 3 - Linear interpolation between nodes+save parameter
    limrho              = 0             ! Option for limiting the min value of rho
                                        ! 0 - No limiting
                                        ! 1 - Use a constant source in flagged elements
                                        ! 2 - Use a constant diffusion in flagged elements
                                        ! 3 - Use a constant source & diffusion in flagged elements
    difcor              = 4             ! Add diffusion in corners: the value of the integer determines
                                        ! the position of the corner
    thresh              = 0             ! Use a threshold for limiting the min value of rho
                                        ! 0 - No threshold
                                        ! 1 - Threshold on conservative values (substitute with numer%thr at nodes)
                                        ! 2 - Threshold on physical values (substitute with numer%thr or numer%thrpre at nodes)
                                        ! 3 - Threshold with filtering (substitute with numer%thr or numer%thrpre)
    filter              = .false.       ! Filter solution to avoid oscillation in empty zones
    !****** N-Gamma-Ti-Te model
    decoup              = .false.       ! decouple the N-Gamma system from the Ti-Te system
                                        ! true: decouple N-Gamma from Ti-Te
                                        ! false: coupled system
    ckeramp             = .false.       ! check the error amplification in the linear system solution (for very ill-conditioned matrices)
    saveNR              = .true.        ! save each N-R iterations
    saveTau             = .false.       ! save tau on faces
    !***** N-Gamma-Vorticity model
    fixdPotLim          = .false.       ! Fix potential at the floating potential on the limiter
    dirivortcore        = .false.       ! Dirichlet boundary condition on the vorticity in the core boundary
    dirivortlim         = .false.       ! Dirichlet boundary condition on the vorticity in the limiter boundary
    convvort            = .false.       ! Consider the convective term in the vorticity equation
    pertini             = 0             ! Add perturbation. 0-no perturbation; 1-sinusoidal perturbation; 2-blob
    logrho              = .false.
    bxgradb             = .false.       ! Consider the term in BxGradB in the vorticity equation

/

&NUMER_LST
    tau(1)              = 1.E+0         ! Stabilization parameter 1st equation
    tau(2)              = 1.E+0         ! Stabilization parameter 2nd equation
    tau(3)              = 1.E+0         ! Stabilization parameter 3rd equation
    tau(4)              = 1.E+0         ! Stabilization parameter 4th equation
    tau(5)              = 1.E-0         ! Stabilization parameter 5th equation
    nrp                 = 2            ! Max number of Newton-Raphson iterations
    tNR                 = 1e-4          ! Tolerance of the Newton-Raphson scheme
    tTM                 = 1e-8          ! Tolerance for the steady state achievement
    div                 = 1e5           ! Divergence of Newton-Raphon iteration
    sc_coe              = 0             ! Shock capturing coefficient
    sc_sen              = 1.4           ! Shock capturing sensibility
    minrho              = 1.e-6         ! Value of rho to start applying limiting
    so_coe              = 0.01          ! Coefficient of the source for limiting rho
    df_coe              = 100.          ! Coefficient of the diffusion for limiting rho
    dc_coe              = 100           ! Coefficient of the diffusion to add in the corners
    thr                 = 1.e-7         ! Min value of density allowed (works only if the switch is activated)
    thrpre              = 1.e-9         ! Min value of pressure allowed (works only if the switch is activated)
    stab                = 5             ! Stabilization type (from 1 to 4 (5), 2 is good, 5 is better (simplified 2, only for N-Gamma(-T))
    dumpnr              = 1             ! Dumping factor for Newton-Raphson (0<dumpnr<1, first parameter to decrease if NR fail)
    ntor                = 3             ! Number of elements in the toroidal direction
    ptor                = 4             ! Polynomial degree in the toroidal direction
    tmax                = 1.5708        ! Max extention in the toroidal direction
    npartor             = 1             ! Number of MPI partition in the toroidal direction
    bohmtypebc          = 0             ! Implementation of the Bohm bc for Gamma (0-Old Bohm BC, 1-Dirichlet always, 2-Dirichlet+Neumann)
    exbdump             = 1.            ! Dumping for ExB drift
/

&GEOM_LST
    R0 = 3.4
    q  = 3.5
/

&MAGN_LST
    ! ******** RMP *******
    amp_RMP             = 5.e-5       ! amplitude RMP
    nbCoils_RMP         = 8           ! number coils RMP (full torus)
    torElongCoils_RMP   = 0.3926991   ! Toroidal elongation of RMP coils (rectangular coils)
    parite              = -1          ! parite RMP (for 2 row, -1 even parite, 1 odd)
    nbRow               = 2           ! number of rows (1,2 or 3) of RMP coils, default is 2
    ! ****** Ripple ******
    amp_Ripple          = 5.e-4     ! amplitude Ripple
    nbCoils_Ripple      = 18        ! number coils Ripple (full torus)
    triang              = 0.0       ! triangularity (0: None)
    ellip               = 1.0       ! ellipticity (1: None)
/


&TIME_LST
    dt0                 = 1.e-1          ! Initial time step
    nts                 = 10000         ! Max number of time iterations to do in the current session (only for transient simulations)
    tfi                 = 1e5           ! Final time: the simulation stops when this time is reached
    tsw                 = 0             ! Switch to modify the time step
                                        ! 0 = dt is not modified
                                        ! 1 = ...
    tis                 = 1             ! Time integration scheme (1-7)
/

&PHYS_LST
    ! ****** Diffusion parameters in m^2/s (start at 20*diff_x if psdtime = true)
    diff_n = 1 ! diffusion in the continuity equation
    diff_u = 1 ! diffusion in the momentum equation
    diff_e = 1 ! perpendicular diffusion for the energy equation
    diff_ee = 1 ! perpendicular diffusion in the electron temperature equation (for the TiTe model)
    diff_vort = 2 ! diffusion in the vorticity equation
    diff_nn = 1e3 ! diffusion for neutral equation (TODO: check adimensionalization)
    ! ****** Option for neutral equation (available only if compile with NEUTRAL)
    Re                  = 1         ! recycling coefficient
    puff                =  6.8e22         ! puff coefficient (particles per second in the whole puff area)
    part_source         = 8.1e20        ! source coefficient (particles per second in the whole core area [ONLY BC 6])
    ener_source         = 20e6        ! source coefficient (Watt in the whole core area [ONLY BC 6])
    ! ****** Ohmic heating: only for testcase 54 with core (not tested)
    Pohmic              = 4.8e-14       ! Ohmic Heating
    ! ****** Background temperature in eV for isothermal model (default is 50 eV)
    Tbg                 = 50
    ! ****** Boundary conditions: set the correspondance between boundary flag and boundary condition
    ! each component must be put separetly
    ! The dimension of bcflags is set to 10, means that at most 10 different kinds of boundary
    ! condition can exist
    bcflags(1:4)        = 1 1 1 1
    bcflags(5)          = 55            ! Pump
    bcflags(6)          = 56            ! Puff
    bcflags(7)          = 50            ! Limiter
    bcflags(8)          = 6             ! In
    bcflags(9)          = 50            ! Out
    bcflags(10)         = 50            ! Upper Limiter
    ! ****** Boundary threshold for Bohm
    bohmth              = 0.0           ! threshold for imposing the bohm boundary condition
    ! ****** Boundary coefficients for the Bohm boundary condition of the temperature equations:
    Gmbohm              = 2.5           ! gamma for Bohm boundary condition for energy equation (usually 7) and for ions energy equation (usually 2.5)
    Gmbohme             = 4.5           ! gamma for Bohm boundary condition for electron energy equation (usually 4.5)
    ! ****** Coefficients used only for testcase < 10 (otherwise computed internally)
    a                   = 25            ! Isothermal compressibility constant (p = a*rho)
    Mref                = 12.4926       ! Non-isothermal compressibility constant
    tie                 = -579.6657     ! temperature interchange coefficient ions-electrons
    diff_pari           = 10            ! (3.1475e5) parallel diffusion for the ions temperature
    diff_pare           = 20            ! (1.0492e7) parallel diffusion for the electron temperature
    diff_pot            = 4             ! diffusion in the potential equation (only used for analytic tests)
    ! **** Non isothermal exponential
    epn                 = 2.5           ! exponential of the parallel diffusion for the temperature
    ! ***** Coefficients for the vorticity model
    etapar              = 1e-5
    Potfloat            = 3.
    diagsource          = 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
/

&UTILS_LST
    printint            = 1             ! how much info we want to print
    dotiming            = true          ! timing of the code
    freqdisp            = 1             ! frequency of result display
    freqsave            = 1             ! frequency of solution save
/

&LSSOLV_LST
    sollib              = 1             ! Solver library to be used
                                        ! 1-Pastix (Limit found in 3D for total nnz > 2*31-1 even with in64 compilation)
                                        ! 2-PSBLAS (all options below TODO: find a combination that works!)
    lstiming            = true
    ! Parameters relative to the library PSBLAS
    itmax               = 500           ! Max number of iterations
    itrace              = 0             ! Display convergence at each iteration
    rest                = 0             ! Restart
    istop               = 1             ! Stopping criterion (see spec on the library manual)
    tol                 = 1e-5          ! Stopping tolerance
    kmethd              = 'BICGSTAB'    ! Krylov method (CG CGS GCR FCG BICG BICGSTAB BICGSTABL RGMRES)
    ptype               = 'JACOBI'      ! Preconditioner type (NONE DIAG JACOBI GS FBGS BJAC AS ML)

    ! Parameters relative to the library MLD2P4
    ! First smoother (ML) / 1-lev preconditioner (other ptype)
    smther              = 'JACOBI'      ! Smoother type: NONE DIAG JACOBI GS FBGS BJAC AS (ML default=ML) For 1-level, repeats previous.
    jsweeps             = 1             ! Number of sweeps for smoother
    novr                = 0             ! Number of overlap layers for AS
    restr               = 'HALO'        ! AS restriction operator: NONE HALO
    prol                = 'NONE'        ! AS prolongation operator: NONE SUM AVG
    solve               = 'ILU'         ! Subdomain solver for BJAC/AS: JACOBI GS BGS ILU ILUT MILU MUMPS SLU UMF
    fill                = 0             ! Fill level P for ILU(P) and ILU(T,P)
    thrsol              = 1.d-4         ! Threshold T for ILU(T,P)

    ! Second smoother (ML-only)
    smther2             = 'NONE'        ! Second (post) smoother: NONE DIAG JACOBI GS FBGS BJAC AS (ML default=ML)
    jsweeps2            = 1             ! Number of sweeps for (post) smoother
    novr2               = 0             ! Number of overlap layers for AS preconditioner
    restr2              = 'HALO'        ! AS restriction operator: NONE HALO
    prol2               = 'NONE'        ! AS prolongation operator: NONE SUM AVG
    solve2              = 'ILU'         ! Subdomain solver for BJAC/AS: JACOBI GS BGS ILU ILUT MILU MUMPS SLU UMF
    fill2               = 0             ! Fill level P for ILU(P) and ILU(T,P)
    thrsol2             = 1.d-4         ! Threshold T for ILU(T,P)

    ! Multilevel parameters (ML-only)
    mlcycle             = 'VCYCLE'      ! Type of multilevel CYCLE: VCYCLE WCYCLE KCYCLE MULT ADD
    outer_sweeps        = 4             ! Number of outer sweeps for ML
    maxlevs             = -3            ! Max Number of levels in a multilevel preconditioner; if <0, lib default
    csize               = -3            ! Target coarse matrix size; if <0, lib default
    aggr_prol           = 'SMOOTHED'    ! Type of aggregation: SMOOTHED UNSMOOTHED
    par_aggr_alg        = 'DEC'         ! Parallel aggregation: DEC, SYMDEC
    aggr_ord            =  'NATURAL'    ! Ordering of aggregation NATURAL DEGREE
    aggr_filter         = 'NOFILTER'    ! Filtering of matrix:  FILTER NOFILTER
    mncrratio           = -1.5          ! Coarsening ratio, if < 0 use library default
    athres              = -2            ! Smoothed aggregation threshold, ignored if < 0

    ! Coarse level solver (ML-only)
    csolve              = 'BJAC'        ! Coarsest-level solver: NONE JACOBI GS BJAC MUMPS UMF SLU SLUDIST
    csbsolve            = 'ILU'         ! Coarsest-level subsolver for BJAC: ILU ILUT MILU UMF MUMPS SLU
    cmat                = 'DIST'        ! Coarsest-level matrix distribution: DIST  REPL
    cfill               = 1             ! Coarsest-level fillin P for ILU(P) and ILU(T,P)
    cthres              = 1.d-4         ! Coarsest-level threshold T for ILU(T,P)
    cjswp               = 1             ! Number of sweeps for JACOBI/GS/BJAC coarsest-level solver
/
