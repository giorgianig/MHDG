function [sol iter flag] = hdg_IterativeSolver(K, ff, nvUnk,u0,p0,nv,P_cond,M)

% condition on pressure
if P_cond
    p0 = [p0; 0];
end

% setup matrices
F = K(1:nvUnk,1:nvUnk);
B = K(nvUnk+1:end,1:nvUnk);
C = K(nvUnk+1:end,nvUnk+1:end);
f = ff(1:nvUnk);
g = ff(nvUnk+1:end);
roUnk = size(K,1) - nvUnk;

% iterative solver parameters
maxIter = 1000;
tol = 1e-9;

% gmres specific parameters
rest = 20;

% initialize9
res_u = 1;
res_p = 1;
p_k = p0;
u_k = u0;
iter = 0;
flag = 0;


%% Projection
% D = sparse(diag(diag(F)));
% D = sparse(diag(sum(F,2)));
% invD = inv(D);
% S = -(B*invD*B') + C;
% while res_u>tol && iter < maxIter
% 
%     u_star = F\f;
%     p_star = S\(g-B*u_star);
%     u_kp1 = u_star - invD*B'*p_star;
%     iter = iter+1;
%     res_u = max(abs(u_kp1-u_k ));
% 
%     update
%     u_k = u_kp1;
%     if any(abs(u_k)>1e3)
%         flag = 4;
%         sol = [];
%         iter = -1;
%         return
%     end
%     disp(['Residual u: ' num2str(res_u) '-- Residual p: ' num2str(res_p)])
% end
% 
% if iter == maxIter
%     error('Linear system not converging')
% end
% sol = [u_kp1; p_star];
% if iter == maxIter
%     flag = 1;
% end

%% Projection block modified
% nBlocks = size(F,1)/nv;
% invD = zeros(size(F));
% for iblock = 1:nBlocks
%     ind = (iblock-1)*nv+(1:nv);
%     invD(ind,ind) = inv(F(ind,ind));
% end
% M = F;
% M = sparse(diag(sum(M,2)));
% invD = inv(M);
% S = -(B*invD*B') + C;
% while res_u>tol && iter < maxIter
% 
%     u_star = F\f;
%     p_star = S\(g-B*u_star);
%     u_kp1 = u_star - invD*B'*p_star;
%     iter = iter+1;
%     res_u = max(abs(u_kp1-u_k ));
% 
%     % update
%     u_k = u_kp1;
%     if any(abs(u_k)>1e3)
%         flag = 4;
%         sol = [];
%         iter = -1;
%         return
%     end
% %     disp(['Residual u: ' num2str(res_u) '-- Residual p: ' num2str(res_p)])
% end
% 
% if iter == maxIter
%     error('Linear system not converging')
% end
% if iter == maxIter
%     flag = 1;
% end
% sol = [u_kp1; p_star];

%% Projection block modified
% nBlocks = size(F,1)/nv;
% invD = zeros(size(F));
% for iblock = 1:nBlocks
%     ind = (iblock-1)*nv+(1:nv);
%     invD(ind,ind) = inv(F(ind,ind));
% end
% M = F;
M = sparse(diag(sum(M,2)));
invD = inv(M);
S = -(B*invD*B') + C;
while res_u>tol && iter < maxIter

    u_star = F\f;
    p_star = S\(g-B*u_star);
    u_kp1 = u_star - invD*B'*p_star;
    iter = iter+1;
    res_u = max(abs(u_kp1-u_k ));

    % update
    u_k = u_kp1;
    if any(abs(u_k)>1e3)
        flag = 4;
        sol = [];
        iter = -1;
        return
    end
%     disp(['Residual u: ' num2str(res_u) '-- Residual p: ' num2str(res_p)])
end

if iter == maxIter
    error('Linear system not converging')
end
if iter == maxIter
    flag = 1;
end
sol = [u_kp1; p_star];


%% SIMPLE
% D = sparse(diag(diag(F)));
% invD = inv(D);
% omega0 = 0.01;
% omega = omega0;
% S = -(B*invD*B') + C;
% while res_u>tol && res_p>tol && iter < maxIter
%     
%     u_star = F\(f - B'*p_k);
%     p_prime = S\(g-B*u_star);
%     u_kp1 = u_star - invD*B'*p_prime;
%     p_kp1 = p_k+omega*p_prime;
%     iter = iter+1;
%     res_u = max(abs(u_kp1-u_k ));
%     res_p = max(abs(p_kp1-p_k ));
%     
%     % update
%     u_k = u_kp1;
%     p_k = p_kp1;
%     %     omega = (1-omega0)/(1-tol) *(1-res_p) +  omega0;
%     %     if omega<omega0
%     %         omega=omega0;
%     %     end
%     if any(abs(u_k)>1e3)
%         flag = 4;
%         sol = [];
%         iter = -1;
%         return
%     end
%     
%     %     disp(['Residual u: ' num2str(res_u) '-- Residual p: ' num2str(res_p)])
% end
% if iter == maxIter
%     flag = 1;
% end
% sol = [u_kp1; p_kp1];

%% SIMPLE variation
% nBlocks = size(F,1)/nv;
% invD = zeros(size(F));
% omega0 = 0.1;
% omega = omega0;
% for iblock = 1:nBlocks
%     ind = (iblock-1)*nv+(1:nv);
%     invD(ind,ind) = inv(F(ind,ind));
% end
% S = -(B*invD*B') + C;
% while res_u>tol && res_p>tol && iter < maxIter
%
%     u_star = F\(f - B'*p_k);
%     p_prime = S\(g-B*u_star);
%     u_kp1 = u_star - invD*B'*p_prime;
%     p_kp1 = p_k+omega*p_prime;
%     iter = iter+1;
%     res_u = max(abs(u_kp1-u_k ));
%     res_p = max(abs(p_kp1-p_k ));
%
%     % update
%     u_k = u_kp1;
%     p_k = p_kp1;
%     if any(abs(u_k)>1e3)
%         flag = 4;
%         sol = [];
%         iter = -1;
%         return
%     end
    % %     disp(['Residual u: ' num2str(res_u) '-- Residual p: ' num2str(res_p)])
% end
% if iter == maxIter
%     flag = 1;
% end
% sol = [u_kp1; p_kp1];

%% SIMPLER
% D = sparse(diag(diag(F)));
% invD = inv(D);
% omega0 = 0.01;
% omega = omega0;
% S = -(B*invD*B') + C;
% while res_u>tol && res_p>tol && iter < maxIter
%
%     p_k = S\(g-B*invD*((D-F)*u_k +f));
%     u_star = F\(f - B'*p_k);
%     p_prime = -(B*invD*B')\(g-B*u_star);
%     u_kp1 = u_star - omega*invD*B'*p_prime;
%     p_kp1 = p_k+omega*p_prime;
%     iter = iter+1;
%     res_u = max(abs(u_kp1-u_k ));
%     res_p = max(abs(p_kp1-p_k ));
%
%     % update
%     u_k = u_kp1;
%     if any(abs(u_k)>1e3)
%        flag = 4;
%          return
%     end
%     disp(['Residual u: ' num2str(res_u) '-- Residual p: ' num2str(res_p)])
% end
% sol = [u_kp1; p_kp1];
% if iter == maxIter
%     flag = 1;
% end
% sol = [u_kp1; p_kp1];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GMRES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% No preconditioning
% [sol,flag,relres,iterGMRES,resvec] = gmres(K,ff,rest,tol,maxIter/rest,[],[],[u0;p0]);
% iter = (iterGMRES(1)-1)*rest + iterGMRES(2);

% Block diagonal
% nBlocks = size(F,1)/nv;
% invD = zeros(size(F));
% for iblock = 1:nBlocks
%     ind = (iblock-1)*nv+(1:nv);
%     invD(ind,ind) = inv(F(ind,ind));
% end
% invD = [invD, zeros(size(B')); zeros(size(B)), eye(size(C))];
% [sol,flag,relres,iter,resvec] = gmres(K,ff,rest,tol,maxIter/rest,invD,[],[u0;p0]);
% iter = (iterGMRES(1)-1)*rest + iterGMRES(2);

% ILU incomplete
% fzd = find( diag(K)==0,1); % first zero in the diagonal
% [Lprecond,Uprecond] = luinc(K,1e-4);
% [sol,flag,relres,iterGMRES,resvec] = gmres(K,ff,rest,tol,maxIter/rest,Lprecond,Uprecond,[u0;p0]);
% iter = (iterGMRES(1)-1)*rest + iterGMRES(2);

% ILU incomplete with renumbering
% fzd = find( diag(K)==0,1); % first zero in the diagonal
% perPrec = [symrcm(K(1:fzd-1,1:fzd-1)), fzd:size(K,1)];
% [Lprecond,Uprecond] = luinc(K(perPrec,perPrec),1e-2);
% [solper,flag,relres,iterGMRES,resvec] = gmres(K(perPrec,perPrec),...
% ff(perPrec),rest,tol,maxIter/rest,Lprecond,Uprecond,[u0;p0]);
% sol = zeros(size(solper));
% sol(perPrec) = solper;
% iter = (iterGMRES(1)-1)*rest + iterGMRES(2);

% SIMPLE Right preconditioning
% params(1) = tol;
% params(2) = maxIter;
% D = sparse(diag(diag(F)));
% invD = inv(D);
% R = -B*invD*B' + C;
% M = [F zeros(nvUnk,roUnk);B R];
% Q = [eye(size(F)) -invD*B'; zeros(size(B)) eye(roUnk)];
% P = M*inv(Q);
% [sol, flag, iter, error]= gmres_r(K,P,ff,params,[u0;p0]);

% SIMPLE Right preconditioning with renumbering
% fzd = find( diag(K)==0,1); % first zero in the diagonal
% perPrec = [symrcm(K(1:fzd-1,1:fzd-1)), fzd:size(K,1)];
% params(1) = tol;
% params(2) = maxIter;
% D = sparse(diag(diag(F)));
% invD = inv(D);
% R = -B*invD*B';
% M = [F zeros(nvUnk,roUnk);B R];
% Q = [eye(size(F)) -invD*B'; zeros(size(B)) eye(roUnk)];
% P = M*inv(Q);
% [sol, flag, iter, error]= gmres_r(K(perPrec,perPrec),P(perPrec,perPrec),ff(perPrec),params,[u0;p0]);

if any([flag == 1,flag == 3])
    iter = inf;
elseif flag == 4;
    iter = -1;
end


% total_iters
% semilogy(error)
