function [KK f] = hdg_AssemblyProjection_first...
    (Fcon,nv,L,L0,Lf,U,U0,Uf,Lface,Df,Ef,Hf,fHf,F_dir,nIntFaces)

% mesh data
Ne = size(Fcon,1);                     % number of elements
nOfFaces = max(max(Fcon));          % number of faces
nDirFaces = sum(sum(F_dir));

% allocation and initialization
v_unk = (nOfFaces-nDirFaces)*nv*2;
dim = v_unk;
allocation = 9*Ne*(2*nv)^2 - nv*nDirFaces;

aux_ones_v = ones(1,6*nv);
index = 0;
I = zeros(allocation,1);
J = zeros(allocation,1);
K = zeros(allocation,1);
f = zeros(dim,1);

% local assembly indexes
ind_1_v_L = (1:2*nv);
ind_2_v_L = 2*nv + (1:2*nv);
ind_3_v_L = 4*nv + (1:2*nv);

% loop in elements
for iElem = 1:Ne

    Fcone = Fcon(iElem,:);
    aux_ex = Fcone > nIntFaces;
    aux_dir = F_dir(iElem,:);
    if aux_ex(1)
%         [L(:,ind_1_v_L,iElem) L0(:,1,iElem) Lro(:,1,iElem) Lf(:,1,iElem)] =...
%             symmGrad(L(:,ind_1_v_L,iElem), L0(:,1,iElem), Lro(:,1,iElem), Lf(:,1,iElem));
        Hf(ind_1_v_L,ind_1_v_L,iElem) = 0;
        fHf(ind_1_v_L,:,iElem) = 0;
    end
    if aux_ex(2)
%         [L(:,ind_2_v_L,iElem) L0(:,1,iElem) Lro(:,1,iElem) Lf(:,1,iElem)] =...
%             symmGrad(L(:,ind_2_v_L,iElem), L0(:,1,iElem), Lro(:,1,iElem), Lf(:,1,iElem));
        Hf(ind_2_v_L,ind_2_v_L,iElem) = 0;
        fHf(ind_2_v_L,:,iElem) = 0;
    end
    if aux_ex(3)
%         [L(:,ind_3_v_L,iElem) L0(:,1,iElem) Lro(:,1,iElem) Lf(:,1,iElem)] =...
%             symmGrad(L(:,ind_3_v_L,iElem), L0(:,1,iElem), Lro(:,1,iElem), Lf(:,1,iElem));
        Hf(ind_3_v_L,ind_3_v_L,iElem) = 0;
        fHf(ind_3_v_L,:,iElem) = 0;
    end
    % global assembly indexes for the velocity
    ind_1_v_G = (Fcone(1)-1)*2*nv + (1:2*nv);
    ind_2_v_G = (Fcone(2)-1)*2*nv + (1:2*nv);
    ind_3_v_G = (Fcone(3)-1)*2*nv + (1:2*nv);
    
    % index for skipping Dirichlet faces
    aux_ass = true(6*nv,1);
    aux_ass(1:2*nv) = aux_dir(1);
    aux_ass(2*nv+1:4*nv) = aux_dir(2);
    aux_ass(4*nv+1:6*nv) = aux_dir(3);

    % faces matrices
    KKe_v = -Lface(:,:,iElem)*L(:,:,iElem) + ...
        Df(:,:,iElem)*U(:,:,iElem) + Hf(:,:,iElem)-Ef(:,:,iElem);
    ffe = Lface(:,:,iElem)*(L0(:,:,iElem)+Lf(:,:,iElem)) - ...
          Df(:,:,iElem)*(U0(:,:,iElem)+Uf(:,:,iElem)) + fHf(:,:,iElem);

    % assembly for velocity: momentum
    indv_m = [ind_1_v_G ind_2_v_G ind_3_v_G];
    indv_m = indv_m(~aux_ass);
    indv_transp_m = transpose(indv_m);
    aux_row = indv_transp_m(:,aux_ones_v(~aux_ass));
    aux_col = indv_m(aux_ones_v(~aux_ass),:);
    index = index(end) + (1:numel(indv_m)^2);
    I(index) = aux_row(:);
    J(index) = aux_col(:);
    K(index) = KKe_v(~aux_ass,~aux_ass);
    f(indv_m) = f(indv_m) + ffe(~aux_ass);

end

% check allocation
if size(I,1)>allocation
    error('size overpassed')
end

% create sparse matrix
KK = sparse(I(I~=0),J(I~=0),K(I~=0),dim,dim);


function [Ls L0s Lros Lfs] = symmGrad(L, L0, Lro, Lf)

Ls = L;
L0s = L0;
Lros = Lro;
Lfs = Lf;

Ls(1:4:end-3,:) = Ls(1:4:end-3,:) + L(1:4:end-3,:);
L0s(1:4:end-3,:) = L0s(1:4:end-3,:) + L0(1:4:end-3,:);
Lros(1:4:end-3,:) = Lros(1:4:end-3,:) + Lro(1:4:end-3,:);
Lfs(1:4:end-3,:) = Lfs(1:4:end-3,:) + Lf(1:4:end-3,:);

Ls(2:4:end-2,:) = Ls(2:4:end-2,:) + L(3:4:end-1,:);
L0s(2:4:end-2,:) = L0s(2:4:end-2,:) + L0(3:4:end-1,:);
Lros(2:4:end-2,:) = Lros(2:4:end-2,:) + Lro(3:4:end-1,:);
Lfs(2:4:end-2,:) = Lfs(2:4:end-2,:) + Lf(3:4:end-1,:);

Ls(3:4:end-1,:) = Ls(3:4:end-1,:) + L(2:4:end-2,:);
L0s(3:4:end-1,:) = L0s(3:4:end-1,:) + L0(2:4:end-2,:);
Lros(3:4:end-1,:) = Lros(3:4:end-1,:) + Lro(2:4:end-2,:);
Lfs(3:4:end-1,:) = Lfs(3:4:end-1,:) + Lf(2:4:end-2,:);

Ls(4:4:end,:) = Ls(4:4:end,:) + L(4:4:end,:);
L0s(4:4:end,:) = L0s(4:4:end,:) + L0(4:4:end,:);
Lros(4:4:end,:) = Lros(4:4:end,:) + Lro(4:4:end,:);
Lfs(4:4:end,:) = Lfs(4:4:end,:) + Lf(4:4:end,:);