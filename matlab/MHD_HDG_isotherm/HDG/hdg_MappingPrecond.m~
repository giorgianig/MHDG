function [L L0 Lro Lf U U0 Uro Uf P P0 Pro Pf] = hdg_MappingPrecond(...
    flipFace,Nv,nv,Np,A,M,B,C,dt,C_dir,M_dir_prec,u0)
% matrix multiplication to get the mapping

% number of elements
Ne = size(flipFace,1);

% initialization
L = zeros(4*Nv,6*nv,Ne);
L0 = zeros(4*Nv,1,Ne);
Lro = zeros(4*Nv,1,Ne);
Lf = Lro;
U = zeros(2*Nv,6*nv,Ne);
U0 = zeros(2*Nv,1,Ne);
Uro = zeros(2*Nv,1,Ne);
Uf = Uro;
P = zeros(Np,6*nv,Ne);
P0 = zeros(Np,1,Ne);
Pro = zeros(Np,1,Ne);
Pf = Pro;

% loop in elements
for iElem = 1:Ne
    
    ind_u = (iElem-1)*2*Nv + (1:2*Nv);
    u0e = u0(ind_u);
    
    % elemental matrices    
    [Le L0e Lfe U0e Ufe] = elementalMatrices...
        (A(:,:,iElem),M(:,:,iElem),B(:,:,iElem),...
        C(:,:,iElem),dt,...
        C_dir(:,iElem),M_dir_prec(:,iElem),u0e);
    
    % local assembly indexes
    flipFace_e = flipFace(iElem,:);
    ind_1_v_L = (1:2*nv);
    ind_2_v_L = 2*nv + (1:2*nv);
    ind_3_v_L = 4*nv + (1:2*nv);
    
    if flipFace_e(1)
        Le(:,ind_1_v_L) = fliplr2(Le(:,ind_1_v_L));
    end
    if flipFace_e(2)
        Le(:,ind_2_v_L) = fliplr2(Le(:,ind_2_v_L));
    end
    if  flipFace_e(3)
        Le(:,ind_3_v_L) = fliplr2(Le(:,ind_3_v_L));
    end
    
    % store mapping
    L(:,:,iElem) = Le;
    L0(:,:,iElem) = L0e;
    Lf(:,:,iElem) = Lfe;
    U0(:,:,iElem) = U0e;
    Uf(:,:,iElem) = Ufe;
end

%% Elemental matrices
function [ LL LL0 LLf UU0 UUf] = elementalMatrices...
    (A,M,B,C,dt,C_dir,M_dir,u0e)

% mapping for the velocity
UU0 = u0e;

% mapping for the velocity gradient
LL = A\C;
LL0 = -A\B*u0e;
LLf = A\C_dir;

%% additional routines

function res = fliplr2(A)
% [ 1 1 1      [ 5 5 5 
%   2 2 2        6 6 6
%   3 3 3  ===>  3 3 3
%   4 4 4        4 4 4
%   5 5 5        1 1 1
%   6 6 6 ]      2 2 2 ]
res = zeros(size(A));
res(:,end-1:-2:1) = A(:,1:2:end-1);
res(:,end:-2:2) = A(:,2:2:end);

