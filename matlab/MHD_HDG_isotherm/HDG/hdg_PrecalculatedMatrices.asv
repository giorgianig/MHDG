function [invA M B BtmLinvA C D E Mp O R W Y Y_dir...
           Ff Df Ef Lf elemSize...
           C_dir M_dir_prec O_dir force] =...
    hdg_PrecalculatedMatrices(X,T,flipFace,refElv,h,tau,mu,F_dir)

% mesh data
Ne = size(T,1);                     % number of elements
Nv = size(T,2);                     % number of element nodes for the velocity
nv = size(refElv.NodesCoord1d,1);   % number of face nodes for the velocity

% allocation and initialization
invA = zeros(4*Nv,4*Nv,Ne); 
M = zeros(2*Nv,2*Nv,Ne); 
B = zeros(4*Nv,2*Nv,Ne); 
BtmLinvA = zeros(2*Nv,4*Nv,Ne);
C = zeros(4*Nv,6*nv,Ne);
D = zeros(2*Nv,2*Nv,Ne); 
E = zeros(2*Nv,6*nv,Ne);
Mp = zeros(2*Nv,Nv,Ne); 
O = zeros(Nv,6*nv,Ne);
R = zeros(Nv,2*Nv,Ne);
W = zeros(Nv,1,Ne);
Y = zeros(Ne,6*nv);
Y_dir = zeros(Ne,1);
Ff = zeros(6*nv,Nv,Ne); 
Df = zeros(6*nv,2*Nv,Ne); 
Ef = zeros(6*nv,6*nv,Ne); 
Lf = zeros(6*nv,4*Nv,Ne); 
elemSize = zeros(Ne,1);
C_dir = zeros(4*Nv,Ne);
M_dir_prec = zeros(2*Nv,Ne);
O_dir = zeros(Nv,Ne);
force = zeros(2*Nv,Ne);

% local assembly indexes
ind_1_v_L = (1:2*nv);
ind_2_v_L = 2*nv + (1:2*nv);
ind_3_v_L = 4*nv + (1:2*nv);

% loop in elements
for iElem = 1:Ne
    
    Te = T(iElem,:);
    Xe = X(Te,:);
    flipFace_e = flipFace(iElem,:);
    aux_dir = F_dir(iElem,:);
    
    % elemental matrices
    [invAe Me Be BtmLinvAe Ce De Ee Mpe Oe Re We Ye Ye_dir...
           Ffe Dfe Efe Lfe elemSizee...
           C_dire M_dir_prece O_dire fe] = elementalMatrices(Xe,refElv,refElp,h,tau,mu,aux_dir);
    
    if flipFace_e(1)
        Ye(ind_1_v_L) = fliplr2(Ye(ind_1_v_L));
        Dfe(ind_1_v_L,:) = flipud2(Dfe(ind_1_v_L,:));
        Ffe(ind_1_v_L,:) = flipud2(Ffe(ind_1_v_L,:));
        Lfe(ind_1_v_L,:) = flipud2(Lfe(ind_1_v_L,:));
    end
    if flipFace_e(2)
        Ye(ind_2_v_L) = fliplr2(Ye(ind_2_v_L));
        Dfe(ind_2_v_L,:) = flipud2(Dfe(ind_2_v_L,:));
        Ffe(ind_2_v_L,:) = flipud2(Ffe(ind_2_v_L,:));
        Lfe(ind_2_v_L,:) = flipud2(Lfe(ind_2_v_L,:));
    end
    if  flipFace_e(3)
        Ye(ind_3_v_L) = fliplr2(Ye(ind_3_v_L));
        Dfe(ind_3_v_L,:) = flipud2(Dfe(ind_3_v_L,:));
        Ffe(ind_3_v_L,:) = flipud2(Ffe(ind_3_v_L,:));
        Lfe(ind_3_v_L,:) = flipud2(Lfe(ind_3_v_L,:));
    end
       
    % store matrices
    invA(:,:,iElem) = invAe;
    M(:,:,iElem) = Me;
    B(:,:,iElem) = Be;
    BtmLinvA(:,:,iElem) = BtmLinvAe;
    C(:,:,iElem) = Ce;
    D(:,:,iElem) = De;
    E(:,:,iElem) = Ee;
    Mp(:,:,iElem) = Mpe;
    O(:,:,iElem) = Oe;
    R(:,:,iElem) = Re;
    W(:,:,iElem) = We;
    Y(iElem,:) = Ye;       
    Y_dir(iElem) = Ye_dir;
    Ff(:,:,iElem) = Ffe;
    Df(:,:,iElem) = Dfe;
    Ef(:,:,iElem) = Efe;
    Lf(:,:,iElem) = Lfe;
    elemSize(iElem) = elemSizee;
    C_dir(:,iElem) = C_dire;
    M_dir_prec(:,iElem) = M_dir_prece;
    O_dir(:,iElem) = O_dire;
    force(:,iElem) = fe;
end

%% Elemental matrices
function [ invA M B  BtmLinvA C D E Mp O R W Y Y_dir ...
           Ff Df Ef Lf elemSize C_dir M_dir_prec O_dir fe] = ...
           elementalMatrices(Xe,refElv,refElp,h,tau,mu,aux_dir)

% mesh data
Nv = size(refElv.NodesCoord,1);
nv = size(refElv.NodesCoord1d,1);
faceNodesv = refElv.faceNodes;
faceNodesp = refElp.faceNodes;
nOfFaces = size(faceNodesv,1);

% initialize all the matrices
C = zeros(4*Nv,6*nv);
C_dir = zeros(4*Nv,1);
Lf_transp = C;
D = zeros(2*Nv,2*Nv);
Df = zeros(6*nv,2*Nv);
E = zeros(2*Nv,6*nv);
E_dir = zeros(2*Nv,1);
Ef = zeros(6*nv,6*nv);
F = zeros(2*Nv,Nv);
Ff = zeros(6*nv,Nv);
L = zeros(2*Nv,4*Nv);
O = zeros(Nv,6*nv);
O_dir = zeros(Nv,1);
Y = zeros(1,6*nv);
Mass = zeros(Nv);
Bx = Mass;
By = Mass;
Gx = zeros(Nv,Nv);
Gy = Gx;
Rx = zeros(Nv,Nv);
Ry = Rx;
intN = zeros(Nv,1);
fex = zeros(Nv,1);
fey = fex;
elemSize = 0;
elemPer = 0;
Y_dir = 0;

% Information of the reference element for the velocity
IPw = refElv.IPweights;                 % use the velocity gauss points to integrate
Niv = refElv.N;
Nxiv = refElv.Nxi;
Netav = refElv.Neta;
IPw_fv = refElv.IPweights1d;
N1dv = refElv.N1d;
Nx1dv = refElv.N1dxi;

% Information of the reference element for the pressure
Nip = refElp.N;
Nxip = refElp.Nxi;
Netap = refElp.Neta;

% Number of Gauss points in the interior 
ngauss = length(IPw);

% x and y coordinates of the element nodes
xe = Xe(:,1); ye = Xe(:,2);

%% VOLUME COMPUTATIONS
for g = 1:ngauss
    
    % Velocity shape functions and derivatives at the current integration point 
    Niv_g = Niv(g,:);
    Nxiv_g = Nxiv(g,:);
    Netav_g = Netav(g,:);
       
    % gauss point position
    xg = Niv_g*xe;
    yg = Niv_g*ye;
    
    % Jacobian
    J = [Nxiv_g*xe	  Nxiv_g*ye
        Netav_g*xe  Netav_g*ye];
    if det(J)<0
        error('computeElementalMatrices: det(J)<0')
    end
      
    % Integration weight
    dvolu=IPw(g)*det(J);
    
    % x and y derivatives
    invJ = inv(J);  
    Nx_g = invJ(1,1)*Nxiv_g + invJ(1,2)*Netav_g;
    Ny_g = invJ(2,1)*Nxiv_g + invJ(2,2)*Netav_g;
       
    % body force at integration point
    force = bodyForce([xg,yg]);
    
    % Contribution of the current integration point to the elemental matrix
    Mass = Mass + Niv_g'*Niv_g*dvolu;
    Bx = Bx + Nx_g'*Niv_g*dvolu;
    By = By + Ny_g'*Niv_g*dvolu;
    Gx = Gx + Nx_g'*Nip_g*dvolu;
    Gy = Gy + Ny_g'*Nip_g*dvolu;
    Rx = Rx + Nx_g'*Niv_g*dvolu;
    Ry = Ry + Ny_g'*Niv_g*dvolu;
    fex = fex + Niv_g'*(force(:,1))*dvolu;
    fey = fey + Niv_g'*(force(:,2))*dvolu;
    intN = intN + Nip_g'*dvolu;
    elemSize = elemSize + dvolu;
end

% expand the matrices
A = expandMatrixA(Mass,4);
M = expandMatrixA(Mass,2);
B = expandMatrixB(Bx,By);
Bt = transpose(expandMatrixB(Bx',By'));
G = expandMatrixF(Gx,Gy);
R = transpose(expandMatrixF(Rx',Ry'));
fe = expandMatrixF(fex,fey);

% tilded pressure shape functions
b = 1/elemSize*intN;

%% FACES COMPUTATIONS:
ngauss_f = length(IPw_fv);
for iface = 1:nOfFaces
    
    % face nodes
    nodes = faceNodesv(iface,:);   
    % indices for local assembly
    ind_face_2 = (iface-1)*2*nv + (1:2*nv);
    ind2 = reshape(bsxfun(@plus,(nodes-1)*2,(1:2)'),2*nv,1); % assembly face to elem for velocity
    ind4 = reshape(bsxfun(@plus,(nodes-1)*4,(1:4)'),4*nv,1); % assembly face to elem for velocity gradient
    
    xf = xe(nodes);
    yf = ye(nodes);
    
    xyfg = N1dv*[xf yf];
    u_ex = setDirichletBoundaryConditions(xyfg);
    %     tau_f = 1/h^2;
    %     if iface~=1
    %         tau_f = 0;
    %     end
%     tau_f = 1/h;
    tau_f = tau;
%     tau_f = tau/mu;
    
    % initialize local matrices
    Cnx = zeros(nv);
    Cny = Cnx;
    Cuxnx_dir = zeros(nv,1);
    Cuxny_dir = Cuxnx_dir;
    Cuynx_dir = Cuxnx_dir;
    Cuyny_dir = Cuxnx_dir;
    Fx = zeros(nv,nv);
    Fy = Fx;
    E_dirx = zeros(nv,1);
    E_diry = E_dirx;
    Massf = Cnx;
    Ox = Fx';
    Oy = Ox;
    O_dir_loc = zeros(nv,1);
    Yx = zeros(1,nv);
    Yy = Yx;
    Y_dir_loc = 0;
    
    %  LOOP IN GAUSS POINTS
    for g = 1:ngauss_f 
        
        % Velocity shape functions and derivatives at the current integration point
        Nfv_g = N1dv(g,:);
        Nfxiv_g = Nx1dv(g,:);
                       
        % Integration weight
        xyDer_g = Nfxiv_g*[xf yf];
        xyDerNorm_g = norm(xyDer_g);
        dline = IPw_fv(g)*xyDerNorm_g;
        
        % Unit normal to the boundary
        t_g = xyDer_g/xyDerNorm_g;
        n_g = [t_g(2) -t_g(1)];
        
        % Contribution of the current integration point to the elemental matrix
        Cnx = Cnx + Nfv_g'*Nfv_g*n_g(1)*dline;
        Cny = Cny + Nfv_g'*Nfv_g*n_g(2)*dline;
        Cuxnx_dir = Cuxnx_dir + Nfv_g'*u_ex(g,1)*n_g(1)*dline;
        Cuxny_dir = Cuxny_dir + Nfv_g'*u_ex(g,1)*n_g(2)*dline;
        Cuynx_dir = Cuynx_dir + Nfv_g'*u_ex(g,2)*n_g(1)*dline;
        Cuyny_dir = Cuyny_dir + Nfv_g'*u_ex(g,2)*n_g(2)*dline;
        Fx = Fx + Nfv_g'*Nf_g*n_g(1)*dline;
        Fy = Fy + Nfv_g'*Nf_g*n_g(2)*dline;
        E_dirx = E_dirx + tau_f*(Nf_g'*u_ex(g,1))*dline; 
        E_diry = E_diry + tau_f*(Nf_g'*u_ex(g,2))*dline; 
        Massf = Massf + tau_f *(Nf_g'*Nf_g)*dline;        
        Ox = Ox + Nf_g'*Nf_g*n_g(1)*dline;
        Oy = Oy + Nf_g'*Nf_g*n_g(2)*dline;       
        O_dir_loc = O_dir_loc + Nf_g'*(u_ex(g,1)*n_g(1) + u_ex(g,2)*n_g(2)) *dline;
        Yx = Yx + Nf_g*n_g(1)*dline;
        Yy = Yy + Nf_g*n_g(2)*dline;
        Y_dir_loc = Y_dir_loc + (u_ex(g,1)*n_g(1) + u_ex(g,2)*n_g(2))*dline;
        elemPer = elemPer + dline;
    end
    
    % expand the matrices
    C_loc = expandMatrixB(Cnx,Cny);
    Lf_transp_loc = C_loc;
    C_loc_dir = expandMatrixF(expandMatrixF(Cuxnx_dir,Cuynx_dir),expandMatrixF(Cuxny_dir,Cuyny_dir));
    F_loc = expandMatrixF(Fx,Fy);
    D_loc = expandMatrixA(Massf,2);
    E_loc = expandMatrixA(Massf,2);
    E_dir_loc = expandMatrixF(E_dirx,E_diry);
    O_loc = transpose(expandMatrixF(Ox',Oy'));
    Y_loc = transpose(expandMatrixF(Yx',Yy'));
     
    % elemental assembly
    C(ind4,ind_face_2) = C(ind4,ind_face_2) + ~aux_dir(iface)*C_loc;
    C_dir(ind4) = C_dir(ind4) + aux_dir(iface)*C_loc_dir;
    Lf_transp(ind4,ind_face_2) = Lf_transp(ind4,ind_face_2) + Lf_transp_loc;
    L(ind2,ind4) = L(ind2,ind4) + C_loc';
    F(ind2,nodes) = F(ind2,nodes) + F_loc;
    Ff(ind_face_2,nodes) = Ff(ind_face_2,nodes) + F_loc;
    D(ind2,ind2) = D(ind2,ind2) + D_loc;
    Df(ind_face_2,ind2) = Df(ind_face_2,ind2) + D_loc;
    E(ind2,ind_face_2) = E(ind2,ind_face_2) + ~aux_dir(iface)*E_loc;
    E_dir(ind2) = E_dir(ind2) + aux_dir(iface)*E_dir_loc;
    Ef(ind_face_2,ind_face_2) = Ef(ind_face_2,ind_face_2) + E_loc;
    O(nodes,ind_face_2) = O(nodes,ind_face_2) + ~aux_dir(iface)*O_loc;
    O_dir(nodes) = O_dir(nodes) + aux_dir(iface)*O_dir_loc;
    Y(ind_face_2) = Y(ind_face_2) + Y_loc;
    Y_dir = Y_dir + aux_dir(iface)*Y_dir_loc;
end

% output
Lf = mu*Lf_transp';
W = b;
invA = inv(A);
BtmLinvA = mu*(Bt- L)*invA;
Mp = F - G;
M_dir_prec = E_dir-BtmLinvA*C_dir;

%% additional routines

function res = expandMatrixA(A,n)
% expand matrix A and M
%  [ A 0 0 0 
%    0 A 0 0
%    0 0 A 0
%    0 0 0 A ]
% dimension n
res = zeros([size(A) n n]);
res(:,:,1:n+1:n^2) = repmat(A, [1 1 n]);
res = permute(res, [3 1 4 2]);
res = reshape(res, n*size(A));

function res = expandMatrixB(Bx,By)
% expand matrix B
%   [ Bx  0
%     By  0
%     0  Bx
%     0  By ]
res = zeros([size(Bx) 4 2]);
res(:,:,[1 2 7 8]) = cat(3,Bx,By,Bx,By);
res = permute(res, [3 1 4 2]);
res = reshape(res, 4*size(Bx,1),2*size(Bx,2));

function res = expandMatrixF(Fx,Fy)
% expand matrix
%   [ Fx
%     Fy ]
res = zeros([size(Fx) 2 1]);
res(:,:,[1 2]) = cat(3,Fx,Fy);
res = permute(res, [3 1 4 2]);
res = reshape(res, 2*size(Fx,1),size(Fx,2));

function res = flipud2(A)
% [ 1 1 1      [ 5 5 5 
%   2 2 2        6 6 6
%   3 3 3  ===>  3 3 3
%   4 4 4        4 4 4
%   5 5 5        1 1 1
%   6 6 6 ]      2 2 2 ]
res = zeros(size(A));
res(end-1:-2:1,:) = A(1:2:end-1,:);
res(end:-2:2,:) = A(2:2:end,:);

function res = fliplr2(A)
% [ 1 1 1      [ 5 5 5 
%   2 2 2        6 6 6
%   3 3 3  ===>  3 3 3
%   4 4 4        4 4 4
%   5 5 5        1 1 1
%   6 6 6 ]      2 2 2 ]
res = zeros(size(A));
res(:,end-1:-2:1) = A(:,1:2:end-1);
res(:,end:-2:2) = A(:,2:2:end);




