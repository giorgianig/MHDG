function [L D T] = computeLiftDragTorque(X,T,infoFaces,L_grad,p,refElv,refElp,mu)

Ne = size(T,1);
Nv = size(refElv.NodesCoord,1);
Np = size(refElp.NodesCoord,1);
extFaces = [infoFaces.exteriorFaces_WALL_DOWN; infoFaces.exteriorFaces_WALL_UP];
elements = extFaces(:,1);
faces = extFaces(:,2);
faceNodesv = refElv.faceNodes;
faceNodesp = refElp.faceNodes;

% index for velocity and pressure
indv = bsxfun(@plus,Nv*(elements'-1),faceNodesv(faces,:)');
indp = bsxfun(@plus,Np*(elements'-1),faceNodesp(faces,:)');

% solutions at Gauss points
L_grad = transpose(reshape(L_grad,4,Ne*Nv));
L_grad_xx = L_grad(:,1); L_grad_xy = L_grad(:,2);
L_grad_yx = L_grad(:,3); L_grad_yy = L_grad(:,4);
Lxx = refElv.N1d*L_grad_xx(indv);
Lxy = refElv.N1d*L_grad_xy(indv);
Lyx = refElv.N1d*L_grad_yx(indv);
Lyy = refElv.N1d*L_grad_yy(indv);
p_g = refElp.N1d*p(indp);
tau_xx = mu*2*Lxx;
tau_xy = mu*(Lxy + Lyx);
tau_yx = tau_xy;
tau_yy = mu*2*Lyy;

% coordinates at Gauss points
x = X(:,1); y = X(:,2);
T_t = T';
x_g = refElv.N1d*x(T_t(indv));
y_g = refElv.N1d*y(T_t(indv));
x_der = refElv.N1dxi*x(T_t(indv));
y_der = refElv.N1dxi*y(T_t(indv));

% weights
IPw = refElv.IPweights1d;

% initialization
L = 0; % lift
D = 0; % drag
T = 0; % torque
for iFace = 1:numel(elements)
    
    % Integration weight
    xyDerNorm = sqrt(x_der(:,iFace).^2 + y_der(:,iFace).^2);
    dline = IPw.*xyDerNorm;

    % Tangent and normal vector
    t = [ x_der(:,iFace)./xyDerNorm y_der(:,iFace)./xyDerNorm];
    n = [-t(:,2) t(:,1)];  % exterior normal
    
    % gauss points coordinates
    b_vect = [-y_g(:,iFace) x_g(:,iFace)];
    b_sc_n = dot(n,b_vect,2);
    t_sc_n = dot(t,b_vect,2);                
                                                     
    D = D + ((-p_g(:,iFace).*n(:,1)) + ((t(:,1).*tau_xx(:,iFace)+t(:,2).*tau_yx(:,iFace)).*n(:,1)+...
                 (t(:,1).*tau_xy(:,iFace)+t(:,2).*tau_yy(:,iFace)).*n(:,2)).*t(:,1))'*dline;
    
    L = L + ((-p_g(:,iFace).*n(:,2)) + ((t(:,1).*tau_xx(:,iFace)+t(:,2).*tau_yx(:,iFace)).*n(:,1)+...
                 (t(:,1).*tau_xy(:,iFace)+t(:,2).*tau_yy(:,iFace)).*n(:,2)).*t(:,2))'*dline;
    
    T = T + ((-p_g(:,iFace).*b_sc_n) + ((t(:,1).*tau_xx(:,iFace)+t(:,2).*tau_yx(:,iFace)).*n(:,1)+...
                 (t(:,1).*tau_xy(:,iFace)+t(:,2).*tau_yy(:,iFace)).*n(:,2)).*t_sc_n)'*dline;   

end


