function [delta Ue xybl xyprof] = boundaryLayerProperties(X,T,u,refEl,infoFaces,nlev,nx,ny,scale)

plotMesh(X,T), hold on

exteriorFaces = [infoFaces.exteriorFaces_WALL_UP; infoFaces.exteriorFaces_WALL_DOWN];
Nv = size(refEl.NodesCoord,1);
np = size(refEl.NodesCoord1d,1);
elements = exteriorFaces(:,1);

% create element numbering
motherMesh = load('../Meshes/KT_profile/KT_profile_box_MOTHER_SQUARE');
[elemNumbering elemRot elemHV] = createElementsNumbering(motherMesh,elements,nlev);
clear motherMesh

% creating vertical lines in the reference element
x_int = (-1:2/(nx-1):1)';
int_line_vert = cell(size(x_int,1),1);
for i = 1:numel(int_line_vert)
    y_line = (-1:2/(ny-1):-x_int(i))';
    x_line = x_int(i)*ones(size(y_line));
    int_line_vert{i} = [x_line, y_line];
end

% creating horizontal lines in the reference element
y_int = (-1:2/(nx-1):1)';
int_line_hor = cell(size(y_int,1),1);
for i = 1:numel(int_line_hor)
    x_line = (-1:2/(ny-1):-y_int(i))';
    y_line = y_int(i)*ones(size(x_line));
    int_line_hor{i} = [x_line, y_line];
end

% creating shape functions to find right angles
V = Vandermonde_LP(refEl.degree,refEl.NodesCoord1d);
[L,U,P] = lu(V');
N_rect = zeros(np,np,2);
for i = 1:np
    x = refEl.NodesCoord1d(i);
    [p,p_xi] = orthopoly1D_deriv(x,refEl.degree);
    N = U\(L\(P*[p,p_xi]));
    N_rect(i,:,1) = N(:,1);
    N_rect(i,:,2) = N(:,2);
end

%% interpolate at given lines
shapeFunctions_cell_vert = cell(nx,1);
shapeFunctions_cell_horz = cell(nx,1);

for iline = 1:nx

    % Vandermonde matrix
    nDeg = refEl.degree;
    V = Vandermonde_LP(nDeg,refEl.NodesCoord);
    [L,U,P] = lu(V');

    % Shape functions verticals
    coord = int_line_vert{iline};
    shapeFunctions = zeros(size(coord,1),Nv,2);
    for i = 1:size(coord,1)
        x = coord(i,:); % (xi,eta) coordinates
        [p,p_xi,p_eta] = orthopoly2D_deriv_xieta(x,nDeg);
        N = U\(L\(P*[p,p_xi,p_eta]));
        shapeFunctions(i,:,1) = N(:,1);
        shapeFunctions(i,:,2) = N(:,2);
        shapeFunctions(i,:,3) = N(:,3);
    end
    shapeFunctions_cell_vert{iline} = shapeFunctions;


    % Shape functions horizontals
    coord = int_line_hor{iline};
    shapeFunctions = zeros(size(coord,1),Nv,2);
    for i = 1:size(coord,1)
        x = coord(i,:); % (xi,eta) coordinates
        [p,p_xi,p_eta] = orthopoly2D_deriv_xieta(x,nDeg);
        N = U\(L\(P*[p,p_xi,p_eta]));
        shapeFunctions(i,:,1) = N(:,1);
        shapeFunctions(i,:,2) = N(:,2);
        shapeFunctions(i,:,3) = N(:,3);
    end
    shapeFunctions_cell_horz{iline} = shapeFunctions;
end

% initialize
delta = [];
Ue = [];
xyprof = [];
xybl = [];

%% Loop in face elements
load rotationStructure.mat
for ielem = 1:numel(elements)

    elements_capa = elemNumbering(ielem,:);
    rot = elemRot(ielem,:);
    vh = elemHV(ielem,:);

    for iline = 1:nx
        % create interpolating lines
        xy = [];
        vel = [];
        iElem = elements_capa(1);
        Xe = X(T(iElem,:),:);
        ind_u = (iElem-1)*2*Nv + (1:2*Nv);
        ue = transpose(reshape(u(ind_u),2,Nv));
        per = rotationStructure{rot(1)}{nDeg};

        if ~vh(1)
            shapeFunctions_cell = shapeFunctions_cell_horz;
        else
            shapeFunctions_cell = shapeFunctions_cell_vert;
        end

        xyline = shapeFunctions_cell{iline}(:,:,1)*Xe(per,:);
        xprof = xyline(1,1); yprof = xyline(1,2);
        vline = shapeFunctions_cell{iline}(:,:,1)*ue(per,:);
        xy = [xy;xyline];
        vel = [vel; vline];
        par = true;
        ud = true;

        %         quiver(xyline(:,1),xyline(:,2),vline(:,1)/scale,vline(:,2)/scale,0,'r')
        for ielem_capa = 2:nlev*2

            iElem = elements_capa(ielem_capa);
            Xe = X(T(iElem,:),:);
            ind_u = (iElem-1)*2*Nv + (1:2*Nv);
            ue = transpose(reshape(u(ind_u),2,Nv));
            per = rotationStructure{rot(ielem_capa)}{nDeg};
            if vh(ielem_capa)~=vh(ielem_capa-1)
                ud = ~ud;
            end
            if ud
                ind = nx-iline+1;
            else
                ind = iline;
            end
            if ~vh(ielem_capa)
                shapeFunctions_cell = shapeFunctions_cell_horz;
            else
                shapeFunctions_cell = shapeFunctions_cell_vert;
            end
            xyline = shapeFunctions_cell{ind}(:,:,1)*Xe(per,:);
            vline = shapeFunctions_cell{ind}(:,:,1)*ue(per,:);

            if par
                xyline = flipud(xyline);
                vline = flipud(vline);
            end
            xy = [xy;xyline];
            vel = [vel; vline];

            par = ~par;
            ud = ~ud;

        end
                quiver(xy(:,1),xy(:,2),vel(:,1)/scale,vel(:,2)/scale,0,'r')
        [vout_x xyout delta_x] = computeOutVelAndDelta(vel,xy,[xprof yprof]);

        % assign
        delta = [delta; delta_x];
        xybl = [xybl; xyout];
        xyprof = [xyprof;[xprof yprof]];
        Ue = [Ue; vout_x];

        %         plot(xyout(1), xyout(2),'ko','markersize',10,'markerfacecolor','k')
    end

end
% eliminate points after separation
[aux perm] = sort(xyprof(:,1));
xyprof = xyprof(perm,:);
delta = delta(perm);
xybl = xybl(perm,:);
Ue = Ue(perm,:);
ind = isnan(Ue);
Ue = Ue(~ind);
xyprof = xyprof(~ind,:);
xybl = xybl(~ind,:);
delta = delta(~ind);

function [elemNumbering elemRot elemHV] = createElementsNumbering(motherMesh,elements,nlev)

X = motherMesh.X;
T = motherMesh.T;
intFaces = GetFaces(T);
x = X(:,1)';
y = X(:,2)';
nelem = numel(elements);
elemNumbering = zeros(nelem,nlev*2);
elemRot = zeros(size(elemNumbering));
elemHV = zeros(size(elemNumbering));
for ielem = 1:nelem

    iElem = elements(ielem);
    x_act = x(T(iElem,:)); y_act = y(T(iElem,:));
    elemNumbering(ielem,1) = iElem;
    elemRot(ielem,1) = findRot(x_act,y_act);
    elemHV(ielem,1) = findHV(y_act,elemRot(ielem,1));

    for ilev = 2:2*nlev
        iElem = elemNumbering(ielem,ilev-1);
        elem_conn = unique([intFaces(intFaces(:,1)==iElem,3);...
            intFaces(intFaces(:,3)==iElem,1)]);
        already = elemNumbering(ielem,elemNumbering(ielem,:)~=0);
        check = ismember(elem_conn,already);
        elem_conn = elem_conn(~check);
        x_conn = x(T(elem_conn,:));
        y_conn = y(T(elem_conn,:));
        for i = 1:size(x_conn,1)

%             if all(unique(x_act) == unique(x_conn(i,:)))
              if all(sort(x_act) == unique(x_conn(i,:)))
                elemNumbering(ielem,ilev) = elem_conn(i);
                elemRot(ielem,ilev) = findRot(x_conn(i,:),y_conn(i,:));
                elemHV(ielem,ilev) = findHV(y_conn(i,:),elemRot(ielem,ilev));
                break
            end
        end


    end
end

function res = findRot(x,y)
tol = 1e-10;
rect = false(1,2);
rect(1) = abs(x(1)-x(2))<tol || abs(y(1)-y(2))<tol;
rect(2) = abs(x(1)-x(3))<tol || abs(y(1)-y(3))<tol;

if all(rect ==[1 1])
    res = 1;
elseif all(rect == [1 0])
    res = 2;
elseif all(rect == [0 1])
    res = 3;
else
    error('Something wrong')
end

function vert = findHV(y,rect)
tol = 1e-10;
up = false(1,2);
up(1) = abs(y(1)-y(2))<tol;
up(2) = abs(y(1)-y(3))<tol;

if all(up == [1 0])
    nodeUp = 3;
elseif all(up == [0 0])
    nodeUp = 1;
elseif all(up == [0 1])
    nodeUp = 2;
end

if     all([nodeUp rect] == [3 1]) || all([nodeUp rect] == [1 2]) || all([nodeUp rect] == [2 3])
    vert = true;
elseif all([nodeUp rect] == [3 2]) || all([nodeUp rect] == [1 3]) || all([nodeUp rect] == [2 1])
    vert = false;
else
    error('Something wrong')
end

function [vout xyout delta] = computeOutVelAndDelta(vel,xyline,xyprof)

dist = sqrt((xyline(:,1)-xyprof(1)).^2 +(xyline(:,2)-xyprof(2)).^2);
[b, m, n] = unique(dist,'first');
dist = dist(m);
vel = vel(m,:);
xyline = xyline(m,:);

vel_mod = sqrt(vel(:,1).^2 + vel(:,2).^2);
tol = 1e-2;
slot = ceil(numel(dist)/10);
npoints = size(vel,1);
m0 = 0;
for i = slot:npoints-slot
    m = mean(vel_mod(i:i+slot));
    if abs(m-m0)/m0<tol
        break
    end
    m0 = m;
end

p = find(abs(vel_mod-m)<=1e-2,1);
if i==npoints-slot || m<0.2
    xyout = [NaN NaN];
    vout = NaN;
    delta = NaN;
else
    xyout = xyline(p,:);
    vout = m;
    delta = dist(p);
end




