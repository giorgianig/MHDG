!************************************************************
! project: MHDG
! file: inout.f90
! date: 06/09/2016
! Module to load/save files
! in the code
!************************************************************




MODULE in_out
   USE HDF5
   USE HDF5_io_module
   USE globals
   USE printutils
   USE MPI_OMP
   IMPLICIT NONE
   
   CONTAINS
   
!********************************
! Loads mesh from an hdf5 file
! external file
!********************************
SUBROUTINE load_mesh(fname)
   USE MPI_OMP
   character(LEN=*) :: fname
   character(len=1000) :: fname_complete
   character(10)  :: str
   character(70)  :: npr,nid

   integer :: elemType, ndim, Nnodes, Nelems, Nnodesperelem
   integer :: Nextfaces, Nnodesperface, IERR
   integer(HID_T) :: file_id
#ifdef PARALL
   integer :: ghfa,i
#endif
   IF (MPIvar%glob_size.GT.1) THEN
      write(nid,*) MPIvar%glob_id+1
      write(npr,*) MPIvar%glob_size
      fname_complete = trim(adjustl(fname))//'_'//trim(adjustl(nid))//'_'//trim(adjustl(npr))//'.h5'
   ELSE
      fname_complete = trim(adjustl(fname))//'.h5'
   END IF

   IF (utils%printint>0) THEN
      print*,'Loading mesh.'
      print*,'	'
   ENDIF

      CALL HDF5_open(fname_complete,file_id,IERR)     
      CALL HDF5_integer_reading(file_id,elemType,'elemType') 
      CALL HDF5_integer_reading(file_id,ndim,'Ndim')
      CALL HDF5_integer_reading(file_id,Nnodes,'Nnodes')
      CALL HDF5_integer_reading(file_id,Nelems,'Nelems')
      CALL HDF5_integer_reading(file_id,Nnodesperelem,'Nnodesperelem')
      CALL HDF5_integer_reading(file_id,Nnodesperface,'Nnodesperface')
      CALL HDF5_integer_reading(file_id,Nextfaces,'Nextfaces')
#ifdef PARALL 
      CALL HDF5_integer_reading(file_id,Nfaces,'Nfaces')
#endif      
      ALLOCATE(Mesh%T(Nelems,Nnodesperelem))
      ALLOCATE(Mesh%X(Nnodes,ndim))
      ALLOCATE(Mesh%Tb(Nextfaces,Nnodesperface))
      ALLOCATE(Mesh%boundaryFlag(Nextfaces))
#ifdef PARALL 
      ALLOCATE(Mesh%ghostFaces(Nfaces))
      ALLOCATE(Mesh%loc2glob_fa(Nfaces))
      ALLOCATE(Mesh%loc2glob_el(Nelems))
#endif      
      CALL HDF5_array2D_reading_int(file_id,Mesh%T,'T')
      CALL HDF5_array2D_reading_int(file_id,Mesh%Tb,'Tb')
      CALL HDF5_array1D_reading_int(file_id,Mesh%boundaryFlag,'boundaryFlag')     
      CALL HDF5_array2D_reading(file_id,Mesh%X,'X')
#ifdef PARALL 
      CALL HDF5_array1D_reading_int(file_id,Mesh%loc2glob_fa,'loc2glob_fa')
      CALL HDF5_array1D_reading_int(file_id,Mesh%loc2glob_el,'loc2glob_el')            
      CALL HDF5_array1D_reading_int(file_id,Mesh%ghostFaces,'ghostFaces')
      ! Find the number of ghost faces
      ghfa = sum(Mesh%ghostFaces)
      Mesh%nghostfaces = ghfa
      ALLOCATE(Mesh%ghostflp(ghfa))
      ALLOCATE(Mesh%ghostpro(ghfa))
      ALLOCATE(Mesh%ghostloc(ghfa))
      CALL HDF5_array1D_reading_int(file_id,Mesh%ghostflp,'ghostFlp')
      CALL HDF5_array1D_reading_int(file_id,Mesh%ghostLoc,'ghostLoc')
      CALL HDF5_array1D_reading_int(file_id,Mesh%ghostPro,'ghostPro')    
#endif      
      CALL HDF5_close(file_id)  
      Mesh%Ndim   = ndim
      Mesh%Nnodes = Nnodes
      Mesh%Nelems = Nelems
      Mesh%Nnodesperelem = Nnodesperelem
      Mesh%Nnodesperface = Nnodesperface
      Mesh%elemType = elemType
      Mesh%Nextfaces = Nextfaces
   
   ! Apply shift if axisymmetric case
   IF (switch%axisym .and. switch%testcase.ge.60) THEN
      WRITE(6,*) "*** Applying translation in axisymmetric case!"
      Mesh%X(:,1) = Mesh%X(:,1) + geom%R0
   END IF
   
   ! Apply length scale
   Mesh%X = Mesh%X/phys%lscale
   
   IF (utils%printint>0) then
     IF (elemType==0) then
      WRITE(str,'(A)'), 'triangles'
      ELSEIF (elemType==1) then
      WRITE(str,'(A)'), 'quads'
      ELSEIF (elemType==2) then
      WRITE(str,'(A)'),'thetra'
      ELSEIF (elemType==3) then
      WRITE(str,'(A)'), 'hexa'
      end IF         
      WRITE(6,*) '*************************************************'
      WRITE(6,*) '*                    MESH                       *'
      WRITE(6,*) '*************************************************'
      WRITE(6,'(A,I18)')  ' Number of dimensions:         ', ndim
      WRITE(6,'(A,A34)')  ' Element type: ', trim(str)
      WRITE(6,'(A,I18)')  ' Number of elements:           ', Nelems
      WRITE(6,'(A,I18)')  ' Number of nodes:              ', Nnodes
      WRITE(6,'(A,I18)')  ' Number of nodes per element:  ', Nnodesperelem
      WRITE(6,'(A,I18)')  ' Number of nodes per face:     ', Nnodesperface
      WRITE(6,'(A,I18)')  ' Number of exterior faces:     ', Nextfaces
      WRITE(6,*)  ' '
      WRITE(6,*)  ' '
   IF (utils%printint>1) THEN
      WRITE(6,*) "Connectivity matrix T:"
      CALL displayMatrixInt(Mesh%T)
      WRITE(6,*) "Boundary connectivity matrix Tb:"
      CALL displayMatrixInt(Mesh%Tb)      
   END IF   
      
   ENDIF
 
END SUBROUTINE load_mesh


!**********************************************************************
! Save solution in HDF5 file format
!**********************************************************************
subroutine HDF5_save_solution(fname)
   USE globals
   implicit none
   
   character(LEN=*) :: fname
   character(70)  :: npr,nid
   integer :: ierr
   character(len=1000) :: fname_complete
   integer(HID_T) :: file_id
   
   IF (MPIvar%glob_size.GT.1) THEN
      write(nid,*) MPIvar%glob_id+1
      write(npr,*) MPIvar%glob_size
      fname_complete = trim(adjustl(fname))//'_'//trim(adjustl(nid))//'_'//trim(adjustl(npr))//'.h5'
   ELSE
      fname_complete = trim(adjustl(fname))//'.h5'
   END IF      
      call HDF5_create(fname_complete,file_id,ierr)
      call HDF5_array1D_saving(file_id,sol%u,size(sol%u),'u')
      call HDF5_array1D_saving(file_id,sol%u_tilde,size(sol%u_tilde),'u_tilde')
      call HDF5_array1D_saving(file_id,sol%tres,size(sol%tres),'tres')
#ifdef ENERGY      
      call HDF5_array1D_saving(file_id,sol%q,size(sol%q),'q')
#endif      
      IF (switch%shockcp .eq.3) THEN
         call HDF5_array2D_saving(file_id,Mesh%scdiff_nodes,size(Mesh%scdiff_nodes,1),size(Mesh%scdiff_nodes,2),'scdiff_nodes')
      END IF
      call HDF5_close(file_id)
      ! Message to confirm succesful creation and filling of file
      IF (MPIvar%glob_id.eq.0) THEN
						   print*,'Output written to file ', fname_complete
						   print*,'	'
      END IF
   
end subroutine HDF5_save_solution


!**********************************************************************
! Load solution in HDF5 file format
!**********************************************************************
subroutine HDF5_load_solution(fname)
   USE globals
   implicit none
   
   character(LEN=*) :: fname
   character(70)  :: npr,nid
   integer :: ierr
   character(len=1000) :: fname_complete
   integer(HID_T) :: file_id
  
  		  ALLOCATE(sol%u(Mesh%Nelems*Mesh%Nnodesperelem*phys%Neq))
		    ALLOCATE(sol%u_tilde(Mesh%Nfaces*Mesh%Nnodesperface*phys%Neq))
						IF (MPIvar%glob_size.GT.1) THEN
						   write(nid,*) MPIvar%glob_id+1
						   write(npr,*) MPIvar%glob_size
						   fname_complete = trim(adjustl(fname))//'_'//trim(adjustl(nid))//'_'//trim(adjustl(npr))//'.h5'
						ELSE
						   fname_complete = trim(adjustl(fname))//'.h5'
						END IF      		    
         
      CALL HDF5_open(fname_complete,file_id,IERR)
      call HDF5_array1D_reading(file_id,sol%u,'u')
      call HDF5_array1D_reading(file_id,sol%u_tilde,'u_tilde')
      call HDF5_close(file_id)
      ! Message to confirm succesful reading of file
      IF (MPIvar%glob_id.eq.0) THEN
						   print*,'Solution read from file ', fname_complete
						   print*,'	'
      END IF
   
end subroutine HDF5_load_solution


!**********************************************************************
! Save HDG matrix (CSR) in HDF5 file format
!**********************************************************************
subroutine HDF5_save_matrix(fname)
   USE globals
   implicit none
   
   character(LEN=*) :: fname
   character(70)  :: npr,nid
   integer :: ierr
   character(len=1000) :: fname_complete
   integer(HID_T) :: file_id
   
   IF (MPIvar%glob_size.GT.1) THEN
      write(nid,*) MPIvar%glob_id+1
      write(npr,*) MPIvar%glob_size
      fname_complete = 'Mat_'//trim(adjustl(fname))//'_'//trim(adjustl(nid))//'_'//trim(adjustl(npr))//'.h5'
   ELSE
      fname_complete = 'Mat_'//trim(adjustl(fname))//'.h5'
   END IF      
      call HDF5_create(fname_complete,file_id,ierr)
      call HDF5_integer_saving(file_id,MatK%n,'n')
      call HDF5_integer_saving(file_id,MatK%nnz,'nnz')
      call HDF5_array1D_saving_int(file_id,MatK%cols,MatK%nnz,'cols')
      call HDF5_array1D_saving_int(file_id,MatK%rowptr,MatK%n+1,'rowptr')
      call HDF5_array1D_saving_int(file_id,MatK%loc2glob,MatK%n,'loc2glob')
      call HDF5_array1D_saving(file_id,MatK%vals,MatK%nnz,'vals')
      call HDF5_close(file_id)
      ! Message to confirm succesful creation and filling of file
      IF (MPIvar%glob_id.eq.0) THEN
						   print*,'Output written to file ', fname_complete
						   print*,'	'
      END IF
   
end subroutine HDF5_save_matrix

END MODULE in_out
