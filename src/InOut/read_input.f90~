!**********************************
! project: MHDG
! file: READ_input.f90
! date: 04/09/2016
! Subroutine for input file loading
!**********************************



!********************************
! Loads input file
!********************************
SUBROUTINE READ_input()
   USE prec_const
   USE globals
   USE MPI_OMP
   IMPLICIT NONE
   
   logical :: driftvel, axisym, restart,steady,timing,psdtime
   integer :: thresh,difcor,tis
   integer :: uinput, init_cond,printint,testcase,nrp
   integer :: nts,tsw,freqdisp,freqsave,shockcp,limrho
   integer :: bcflags(1:10)
   real*8  :: dt0, R0, diff_n, diff_u, tau,tNr,tTM,div
   real*8  :: tfi,a,bohmth,lscale,q,diffred,diffmin,dfcoef
   real*8  :: sc_coe,so_coe,df_coe,thr,minrho,dc_coe,sc_sen
   real*8  :: epn,Mref,diff_par,diff_e,Gmbohm
   character(100) :: msg
   
   ! Defining the variables to READ from the file
   NAMELIST /SWITCH_LST/ restart,steady,axisym,init_cond,driftvel,testcase,psdtime,diffred,diffmin, &
                       & shockcp,limrho,difcor,thresh
   NAMELIST /NUMER_LST/ tau,nrp,tNR,tTM,div,sc_coe,sc_sen,minrho,so_coe,df_coe,dc_coe,thr
   NAMELIST /GEOM_LST/ R0,q
   NAMELIST /TIME_LST/ dt0,nts, tfi,tsw,tis
   NAMELIST /PHYS_LST/ lscale,diff_n,diff_u,a,bcflags,bohmth,dfcoef,diff_e,epn,Mref,diff_par,Gmbohm
   NAMELIST /UTILS_LST/ PRINTint, timing,freqdisp,freqsave
 
   
    ! Reading the file
    uinput = 100
    OPEN(uinput, file='param.txt', status='unknown')
    READ(uinput,SWITCH_LST)
    READ(uinput,NUMER_LST)
    READ(uinput,GEOM_LST)
    READ(uinput,TIME_LST)
    READ(uinput,PHYS_LST)
    READ(uinput,UTILS_LST)
    CLOSE(uinput)
  
   ! Storing at the right place
   switch%restart   = restart
   switch%steady    = steady
   switch%axisym    = axisym
   switch%driftvel  = driftvel  
   switch%init_cond = init_cond  
   switch%testcase  = testcase  
   switch%psdtime   = psdtime
   switch%diffred   = diffred
   switch%diffmin   = diffmin
   switch%shockcp   = shockcp   
			switch%limrho    = limrho   
			switch%thresh    = thresh      
			switch%difcor    = difcor
   numer%tau        = tau 
   numer%nrp        = nrp
   numer%tNR        = tNR
   numer%tTM        = tTM
   numer%div        = div
   numer%sc_coe     = sc_coe
   numer%sc_sen     = sc_sen
   numer%minrho     = minrho   
   numer%so_coe     = so_coe
   numer%df_coe     = df_coe
   numer%dc_coe     = dc_coe
   numer%thr        = thr
   geom%R0          = R0
   geom%q           = q
   time%dt0         = dt0
   time%tfi         = tfi
   time%nts         = nts
   time%tsw         = tsw
   time%tis         = tis
   phys%lscale      = lscale
   phys%diff_n      = diff_n
   phys%diff_u      = diff_u
   phys%diff_e      = diff_e   
   phys%a           = a
   phys%bcflags     = bcflags
   phys%bohmth      = bohmth
   phys%dfcoef      = dfcoef
   phys%epn         = epn
   phys%Mref        = Mref
   phys%diff_par    = diff_par
   phys%diff_par    = Gmbohm
   utils%PRINTint   = printint
   utils%timing     = timing
   utils%freqdisp   = freqdisp
   utils%freqsave   = freqsave
  
  IF (switch%steady) THEN 
     msg = 'Steady state simulation'
  ELSEIF (switch%psdtime) THEN
     msg = 'Pseudotime simulation for reducing diffusion'
  ELSE
     msg = 'Time advancing simulation'
  END IF
 
	 ! Some checking of the inputs
		if (time%tis.ne.1 .and. time%tis.ne.2) then
		   write(6,*) "Error: wrong time integration scheme in parameters: tis=", time%tis
		   stop
		end if
  
   ! A little message for the user... 
  if (MPIvar%glob_id.eq.0) THEN  
  PRINT*,'                                                            '
  PRINT*,'                                                            '    
  PRINT*,'-------------------    MHDG SIMULATION     -----------------'
  PRINT*,'                                                            '
#ifdef EULISOTH  
  PRINT*,' MODEL: Euler isothermal                                    '
#endif  
#ifdef NGAMMA
#ifndef ENERGY
  PRINT*,' MODEL: N-Gamma isothermal                                  '  
#else
  PRINT*,' MODEL: N-Gamma-energy                                      '    
#endif
#endif
  PRINT*,'                                                            '
  PRINT*,'------------------------------------------------------------'
  PRINT*,'  Simulation type: ',Adjustl(Trim(msg))
  PRINT*,'------------------------------------------------------------'
		PRINT*,'Parameter file loaded:'
		PRINT*,'	***************** Geometry ****************************'
		PRINT*,'		- R0:                                          ', R0
		PRINT*,'		- Security factor:                             ', q
		PRINT*,'	***************** Time stepping ************************'
		PRINT*,'		- dt0:                                         ', time%dt0
		PRINT*,'		- dt modification:                             ', time%tsw
		PRINT*,'		- final time:                                  ', time%tfi
		PRINT*,'		- max number of time steps:                    ', time%nts
		PRINT*,'		- time integration scheme:                     ', time%tis
		PRINT*,'	***************** Physics *****************************'
		PRINT*,'		- length scale:                                ', lscale
		PRINT*,'		- perp. diffusion in the continuity equation:  ', diff_n
		PRINT*,'		- perp. diffusion in the momentum equation:    ', diff_u  
!#ifdef ENERGY
		PRINT*,'		- perp. diffusion in the energy equation:      ', diff_e
		PRINT*,'		- paral. diffusion for the temperature:        ', diff_par  
		PRINT*,'		- temperature diffusion exponential:           ', epn
		PRINT*,'		- reference Mach number:                       ', Mref
		PRINT*,'		- gamma for Bohm boundary condition on energy: ', Gmbohm
!#endif		
		PRINT*,'		- constant for the momentum equation (isoth)   ', a    
		PRINT*,'		- constant for the drift velocity:             ', dfcoef    
		PRINT*,'	***************** Switches ****************************'
		PRINT*,'		- restart:                                     ', switch%restart
		PRINT*,'		- stady state simulation:                      ', switch%steady
		PRINT*,'		- initialization:                              ', switch%init_cond
		PRINT*,'		- axisym:                                      ', switch%axisym
		PRINT*,'		- driftvel:                                    ', driftvel
		PRINT*,'		- test case:                                   ', testcase
  PRINT*,'		- shockcp:                                     ', shockcp
  PRINT*,'		- minrho:                                      ', minrho
  PRINT*,'		- thresh:                                      ', thresh  		
		PRINT*,'	***************** Numerics ****************************'
		PRINT*,'		- tau:                                         ', numer%tau		
		PRINT*,'		- max number of N-R iterations:                ', numer%nrp
		PRINT*,'		- tolerance for the N-R scheme:                ', numer%tNR		
		PRINT*,'		- tolerance for the steady state achievement:  ', numer%tTM
  IF (switch%shockcp.gt.0) THEN
  PRINT*,'		- shock capturing coeff:                        ', numer%sc_coe
  PRINT*,'		- shock capturing sensibility:                  ', numer%sc_sen
  END IF		
  IF (switch%limrho.gt.0) THEN 
  PRINT*,'		- applying limiting of rho at value:            ', numer%minrho
  END IF
  IF (switch%limrho.eq.1 .or. switch%limrho.eq.3) THEN
  PRINT*,'		- coefficient of the source for limiting rho:   ', numer%so_coe
  END IF		
  IF (switch%limrho.eq.2 .or. switch%limrho.eq.3) THEN
  PRINT*,'		- coefficient of the diffusion for limiting rho:', numer%df_coe
  END IF
  IF (switch%difcor.gt.0) THEN
  PRINT*,'		- adding diffusion in corners, in position:     ', switch%difcor
  PRINT*,'		- diffusion coefficient in corners:             ', numer%dc_coe
  END IF		  
  IF (switch%thresh.gt.0) THEN
  PRINT*,'		- using a threshold at rho                      :', numer%thr
  END IF
  
		PRINT*,'	'
  end if
END SUBROUTINE READ_input

