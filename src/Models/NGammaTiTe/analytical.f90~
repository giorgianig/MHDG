!*****************************************
! project: MHDG
! file: analytical.f90
! date: 20/09/2017
!  ******** N-Gamma-Energy system     ****
! Define the analytical solution and the 
! body forces for different cases
!*****************************************
MODULE analytical
  USE prec_const
  USE globals, ONLY: switch
  USE physics
  USE PrintUtils
  IMPLICIT NONE
  
  CONTAINS
  
		!*****************************************
		! Analytical solution 
		!**************************************** 
  SUBROUTINE analytical_solution(x,y,u)
  real*8, dimension(:), intent(IN)        :: x,y
  real*8, dimension(:,:), intent(OUT)     :: u
  real*8, dimension(size(u,1),size(u,2))  :: up
  integer:: i
  real*8 :: a,r(size(x))
  
  up = 0.
  a = 2*pi
				SELECT CASE(switch%testcase)
				  CASE(1)
				  				IF (switch%axisym) THEN
						      WRITE(6,*) "This is NOT an axisymmetric test case!"
						      stop
						   END IF
				  ! Cartesian case with div(b)~=0, n = 2+sin(wx*x )*sin(wy*y),  u = cos(wx*x)*cos(wy*y), E = 20+cos(wx*x)*sin(wy*y)
								  up(:,1) = 2+sin(a*x)*sin(a*y)
								  up(:,2) = cos(a*x)*cos(a*y)
								  up(:,3) = 20+cos(a*x)*sin(a*y)
						CASE(2)
						! Axisimmetric case with div(b)~=0, n = 2+sin(wx*x )*sin(wy*y),  u = cos(wx*x)*cos(wy*y), E = 20+cos(wx*x)*sin(wy*y)
						   IF (.not.switch%axisym) THEN
						      WRITE(6,*) "This is an axisymmetric test case!"
						      stop
						   END IF 
								  up(:,1) = 2+sin(a*x)*sin(a*y)
								  up(:,2) = cos(a*x)*cos(a*y)
								  up(:,3) = 20+cos(a*x)*sin(a*y)
				  CASE(50:64)
				      up(:,1) = 1.
				  CASE(65)
				      up(:,1) = 1.
				      r = 	sqrt ( (x*phys%lscale-geom%R0)**2 + (y*phys%lscale-0.75)**2 )
				      DO i=1,size(x)
				         IF (r(i).le. 0.05) THEN
				            up(i,2) = 1.
				         END IF
				      END DO			      
				  CASE DEFAULT
				      WRITE(6,*) "Error! Test case not valid"
				      STOP
				END SELECT
				! Convert physical variables to conservative variables
				CALL phys2cons(up,u)
  END SUBROUTINE analytical_solution



		!*****************************************
		! Analytical gradient  
		!**************************************** 
  SUBROUTINE analytical_gradient(x,y,u,ux,uy)
  real*8, dimension(:), intent(IN)        :: x,y
  real*8, dimension(:,:), intent(IN)      :: u
  real*8, dimension(:,:), intent(OUT)     :: ux,uy
  real*8, dimension(size(u,1),size(u,2))  :: upx,upy
  real*8, dimension(size(u,1),phys%npv)  :: up
  real*8 :: a
  
  upx = 0.
  upy = 0.
  CALL cons2phys(u,up)
  a = 2*pi
				SELECT CASE(switch%testcase)
				  CASE(1)
				  				IF (switch%axisym) THEN
						      WRITE(6,*) "This is NOT an axisymmetric test case!"
						      stop
						   END IF
				  ! Circular field centered in [xc, yc], n = 2+sin(wx*x )*sin(wy*y),  u = cos(wx*x)*cos(wy*y), E = 20+cos(wx*x)*sin(wy*y)
        upx(:,1) =  a*cos(a*x)*sin(a*y)
        upx(:,2) = -a*sin(a*x)*cos(a*y)
        upx(:,3) = -a*sin(a*x)*sin(a*y)
        upy(:,1) =  a*sin(a*x)*cos(a*y)
        upy(:,2) = -a*cos(a*x)*sin(a*y)
        upy(:,3) = -a*cos(a*x)*cos(a*y)
								  
						CASE(2)
						! Axisimmetric case with div(b)~=0, n = 2+sin(wx*x )*sin(wy*y),  u = cos(wx*x)*cos(wy*y), E = 20+cos(wx*x)*sin(wy*y)
						   IF (.not.switch%axisym) THEN
						      WRITE(6,*) "This is an axisymmetric test case!"
						      stop
						   END IF 
        upx(:,1) =  a*cos(a*x)*sin(a*y)
        upx(:,2) = -a*sin(a*x)*cos(a*y)
        upx(:,3) = -a*sin(a*x)*sin(a*y)
        upy(:,1) =  a*sin(a*x)*cos(a*y)
        upy(:,2) = -a*cos(a*x)*sin(a*y)
        upy(:,3) = -a*cos(a*x)*cos(a*y)
				  CASE(50:)
				      ! Do nothing   
				  CASE DEFAULT
				      WRITE(6,*) "Error! Test case not valid"
				      STOP
				END SELECT
				! Convert physical variables to conservative variables
				ux(:,1) = upx(:,1) 
				uy(:,1) = upy(:,1)
				ux(:,2) = ( upx(:,1)*up(:,2)+up(:,1)*upx(:,2) )
				uy(:,2) = ( upy(:,1)*up(:,2)+up(:,1)*upy(:,2) )
				ux(:,3) = ( upx(:,1)*up(:,3)+up(:,1)*upx(:,3) )
				uy(:,3) = ( upy(:,1)*up(:,3)+up(:,1)*upy(:,3) )

  END SUBROUTINE analytical_gradient
  
  

		!*****************************************
		! Body forces
		!**************************************** 
  SUBROUTINE body_force(x,y,f)
  real*8, dimension(:), intent(IN) :: x,y
  real*8, dimension(:,:), intent(OUT) :: f
  integer                            ::  n
  real*8  :: a,b,xc,yc,D,mu,csi,kpar,Mref,epn
  
  n = size(x)
  
    f = 0.
				SELECT CASE(switch%testcase)
				  CASE(1)
				  ! Cartesian case, n = 2+sin(2*pi*x)*sin(2*pi*y),  u = cos(2*pi*x)*cos(2*pi*y), E = 20+cos(wx*x)*sin(wy*y)
				  ! Case 8 of the Matlab version: for convergence purpose
				  a = 2*pi
				  b = 2*pi
				  xc = 0.
				  yc = 0.
				  D    = phys%diff_n
				  mu   = phys%diff_u
				  csi  = phys%diff_e
				  kpar = phys%diff_par
				  Mref = phys%Mref
				  epn  = phys%epn
				  

      f(:,1) = cos(a * x) ** 2 * a * sin(b * y) * cos(b * y) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * cos(b * y) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) + (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) / 0.30D2 + sin(a * x) * cos(b * y) ** 2 * b * cos(a * x) * (x * y / 0.30D2 + y / 0.30D2) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b * (x * y / 0.30D2 + y / 0.30D2) + (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * (x / 0.30D2 + 0.1D1 / 0.30D2) - D * (-sin(a * x) * a ** 2 * sin(b * y) - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * cos(a * x) * a * sin(b * y) / 0.30D2 - (x * y / 0.30D2 + y / 0.30D2) * sin(a * x) * cos(b * y) * b / 0.30D2 - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) * a * sin(b * y) / 0.30D2 - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * sin(a * x) * a ** 2 * sin(b * y) + y * sin(a * x) * cos(b * y) * b / 0.30D2 + (x * y / 0.30D2 + y / 0.30D2) * cos(a * x) * a * cos(b * y) * b) - sin(a * x) * sin(b * y) * b ** 2 - (x / 0.30D2 + 0.1D1 / 0.30D2) * ((x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * cos(a * x) * a * sin(b * y) + (x * y / 0.30D2 + y / 0.30D2) * sin(a * x) * cos(b * y) * b) - (x * y / 0.30D2 + y / 0.30D2) * (-y * cos(a * x) * a * sin(b * y) / 0.15D2 + (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * cos(a * x) * a * cos(b * y) * b + (x / 0.30D2 + 0.1D1 / 0.30D2) * sin(a * x) * cos(b * y) * b - (x * y / 0.30D2 + y / 0.30D2) * sin(a * x) * sin(b * y) * b ** 2))


      f(:,2) = cos(a * x) ** 3 * a * sin(b * y) * cos(b * y) ** 2 * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) - 0.2D1 * (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) ** 2 * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * sin(a * x) * a + (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) ** 2 * cos(b * y) ** 2 / 0.30D2 + sin(a * x) * cos(b * y) ** 3 * b * cos(a * x) ** 2 * (x * y / 0.30D2 + y / 0.30D2) - 0.2D1 * (0.2D1 + sin(a * x) * sin(b * y)) *cos(a * x) ** 2 * cos(b * y) * (x * y / 0.30D2 + y / 0.30D2) * sin(b * y) * b + (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) ** 2* cos(b * y) ** 2 * (x / 0.30D2 + 0.1D1 / 0.30D2) + Mref * ((x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (0.2D1 / 0.3D1 * cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref) + (x * y / 0.30D2 + y / 0.30D2) * (0.2D1 / 0.3D1 * sin(a * x) * cos(b * y) * b * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (cos(a * x) * cos(b * y) * b + cos(a * x) ** 2 * cos(b* y) * sin(b * y) * b) / Mref)) - mu * (-0.3D1 * cos(a * x) * a ** 2 * sin(b * y) * cos(b * y) * sin(a * x) - (0.2D1 + sin(a * x) *sin(b * y)) * cos(a * x) * a ** 2 * cos(b * y) - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) ** 2 * a * sin(b * y) * cos(b * y) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * cos(b * y)) / 0.30D2 - (x * y / 0.30D2 + y / 0.30D2) * (sin(a * x) * cos(b * y) ** 2 * b * cos(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b) / 0.30D2 - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) ** 2 * a * sin(b *y) * cos(b * y) / 0.30D2 - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * cos(b * y) / 0.30D2 + (x / 0.30D2 - y ** 2 / 0.30D2+ 0.1D1 / 0.15D2) * (-0.3D1 * cos(a * x) * a ** 2 * sin(b * y) * cos(b * y) * sin(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * a ** 2 * cos(b * y)) + y * (sin(a * x) * cos(b * y) ** 2 * b * cos(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b) / 0.30D2 + (x * y / 0.30D2 + y / 0.30D2) * (cos(a * x) ** 2 * a * cos(b * y) ** 2 * b - sin(a * x) ** 2 * cos(b * y) ** 2 * b * a - cos(a * x) ** 2 * a * sin(b * y) ** 2 * b + (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y) * b)) - 0.3D1 * sin(a * x) * cos(b * y) * b ** 2 * cos(a * x) * sin(b * y) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) *b ** 2 - (x / 0.30D2 + 0.1D1 / 0.30D2) * ((x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) ** 2 * a * sin(b * y) * cos(b * y) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * cos(b * y)) + (x * y / 0.30D2 + y / 0.30D2) * (sin(a * x) * cos(b * y) ** 2 * b * cos(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b)) - (x * y / 0.30D2 + y / 0.30D2) * (-y * (cos(a * x) ** 2 * a * sin(b * y) * cos(b * y) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * cos(b * y)) / 0.15D2 + (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) ** 2 * a * cos(b * y) ** 2 * b - sin(a * x) ** 2 * cos(b * y) ** 2 * b * a - cos(a * x) ** 2 * a * sin(b * y) ** 2 * b + (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y) * b) + (x / 0.30D2 + 0.1D1 / 0.30D2) * (sin(a * x) * cos(b * y) ** 2 * b * cos(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b) + (x * y / 0.30D2 + y / 0.30D2) * (-0.3D1 * sin(a * x) * cos(b * y) *b ** 2 * cos(a * x) * sin(b * y) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * b ** 2)))

      f(:,3) = (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y) + 0.2D1 / 0.3D1 * cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (-sin(a *x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) *a)) * cos(a * x) * cos(b * y) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) - ((0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y)) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1)) * sin(a * x) * a * cos(b * y) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) + ((0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y)) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1)) * cos(a * x) * cos(b * y) / 0.30D2 + (sin(a * x) * cos(b * y) * b * (0.20D2 + cos(a* x) * sin(b * y)) + (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * b + 0.2D1 / 0.3D1 * sin(a * x) * cos(b * y) * b * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y)** 2 / 0.2D1) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y))* (cos(a * x) * cos(b * y) * b + cos(a * x) ** 2 * cos(b * y) * sin(b * y) * b)) * cos(a * x) * cos(b * y) * (x * y / 0.30D2 + y / 0.30D2) - ((0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y)) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1)) * cos(a * x) * sin(b * y) * b * (x * y / 0.30D2 + y / 0.30D2) + ((0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y)) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1)) * cos(a * x) * cos(b * y) * (x / 0.30D2 + 0.1D1 / 0.30D2) - csi * (-sin(a * x) * a ** 2 * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - 0.2D1 * cos(a * x) * a ** 2 * sin(b * y) ** 2 * sin(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * a ** 2 * sin(b * y) - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) *a * sin(b * y)) / 0.30D2 - (x * y / 0.30D2 + y / 0.30D2) * (sin(a* x) * cos(b * y) * b * (0.20D2 + cos(a * x) * sin(b * y)) + (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * b) / 0.30D2 - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) / 0.30D2 -(0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y) /0.30D2 + (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (-sin(a * x) * a ** 2 * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - 0.2D1 * cos(a * x) * a ** 2 * sin(b * y) ** 2 * sin(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * a ** 2 * sin(b * y))+ y * (sin(a * x) * cos(b * y) * b * (0.20D2 + cos(a * x) * sin(b* y)) + (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * b) / 0.30D2 + (x * y / 0.30D2 + y / 0.30D2) * (cos(a * x) * a* cos(b * y) * b * (0.20D2 + cos(a * x) * sin(b * y)) - sin(a * x) ** 2 * cos(b * y) * b * a * sin(b * y) + cos(a * x) ** 2 * a * sin(b * y) * cos(b * y) * b - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * cos(b * y) * b)) - sin(a * x) * sin(b * y) * b ** 2 * (0.20D2 + cos(a * x) * sin(b * y)) + 0.2D1 * sin(a * x) * cos(b * y) ** 2 * b ** 2 * cos(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b ** 2 - (x / 0.30D2 + 0.1D1 / 0.30D2) * ((x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a *x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - (0.2D1+ sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y)) + (x * y / 0.30D2 + y / 0.30D2) * (sin(a * x) * cos(b * y) * b * (0.20D2 + cos(a * x) * sin(b * y)) + (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * b)) - (x * y / 0.30D2 + y / 0.30D2) * (-y* (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y)) / 0.15D2 + (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) * a * cos(b * y) * b * (0.20D2 + cos(a * x) * sin(b * y)) - sin(a * x) ** 2 * cos(b * y) * b * a * sin(b * y) + cos(a * x) ** 2 * a * sin(b * y) * cos(b * y) * b - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * cos(b * y) * b) + (x / 0.30D2 + 0.1D1 / 0.30D2) * (sin(a * x) * cos(b * y) * b * (0.20D2 + cos(a * x) * sin(b * y)) + (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * b) + (x * y / 0.30D2 + y / 0.30D2) * (-sin(a * x) * sin(b * y) * b ** 2 * (0.20D2 + cos(a * x) * sin(b * y)) + 0.2D1 * sin(a * x) * cos(b * y) ** 2 * b ** 2 * cos(a * x) - (0.2D1 + sin(a* x) * sin(b * y)) * cos(a * x) * sin(b * y) * b ** 2))) - kpar *(((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * epn * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) * ((x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a *x) * a) / Mref / 0.3D1 + (x * y / 0.30D2 + y / 0.30D2) * (cos(a *x) * cos(b * y) * b + cos(a * x) ** 2 * cos(b * y) * sin(b * y) *b) / Mref / 0.3D1) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) + ((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b* y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * ((-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref / 0.90D2 + (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (-cos(a * x) * a ** 2 * sin(b * y) - sin(a * x) ** 2 * a ** 2 * cos(b *y) ** 2 + cos(a * x) ** 2 * cos(b * y) ** 2 * a ** 2) / Mref / 0.3D1 + y * (cos(a * x) * cos(b * y) * b + cos(a * x) ** 2 * cos(b *y) * sin(b * y) * b) / Mref / 0.90D2 + (x * y / 0.30D2 + y / 0.30D2) * (-sin(a * x) * a * cos(b * y) * b - 0.2D1 * cos(a * x) * cos(b * y) * sin(b * y) * b * sin(a * x) * a) / Mref / 0.3D1) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) + ((0.20D2 + cos(a * x)* sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * ((x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2)* (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref / 0.3D1 + (x * y / 0.30D2 + y / 0.30D2) * (cos(a * x) * cos(b * y) * b + cos(a * x) ** 2 * cos(b * y) * sin(b* y) * b) / Mref / 0.3D1) / 0.30D2 + ((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * epn * (cos(a * x) * cos(b * y) * b + cos(a * x) ** 2 * cos(b * y) * sin(b * y) * b) / (0.20D2 + cos(a * x) * sin(b * y) -cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) * ((x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref / 0.3D1 + (x * y / 0.30D2 + y / 0.30D2) * (cos(a * x) * cos(b * y) * b + cos(a * x) ** 2 * cos(b * y) * sin(b * y) * b) / Mref / 0.3D1) * (x * y / 0.30D2 + y / 0.30D2) + ((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * (-y * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref / 0.45D2 + (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (-sin(a * x) * a * cos(b * y) * b - 0.2D1 * cos(a* x) * cos(b * y) * sin(b * y) * b * sin(a * x) * a) / Mref / 0.3D1 + (x / 0.30D2 + 0.1D1 / 0.30D2) * (cos(a * x) * cos(b * y) * b + cos(a * x) ** 2 * cos(b * y) * sin(b * y) * b) / Mref / 0.3D1 + (x * y / 0.30D2 + y / 0.30D2) * (-cos(a * x) * sin(b * y) * b ** 2- cos(a * x) ** 2 * sin(b * y) ** 2 * b ** 2 + cos(a * x) ** 2 * cos(b * y) ** 2 * b ** 2) / Mref / 0.3D1) * (x * y / 0.30D2 + y / 0.30D2) + ((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * ((x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref / 0.3D1 + (x* y / 0.30D2 + y / 0.30D2) * (cos(a * x) * cos(b * y) * b + cos(a* x) ** 2 * cos(b * y) * sin(b * y) * b) / Mref / 0.3D1) * (x / 0.30D2 + 0.1D1 / 0.30D2))
      
      CASE(2)
						! Axisimmetric case with div(b)~=0, n = 2+sin(2*pi*x)*sin(2*pi*y),  u = cos(2*pi*x)*cos(2*pi*y), E = 20+cos(wx*x)*sin(wy*y)
						   IF (.not.switch%axisym) THEN
						      WRITE(6,*) "This is an axisymmetric test case!"
						      stop
						   END IF
									a = 2*pi
									b = 2*pi
									xc = 0.
									yc = 0.
									D    = phys%diff_n
									mu   = phys%diff_u
									csi  = phys%diff_e
									kpar = phys%diff_par
									Mref = phys%Mref
									epn  = phys%epn

									f(:,1) = 0.1D1 / x * (0.120D3 * cos(a * x) * cos(b * y) - 0.60D2 * sin(a * x) * a * cos(b * y) * x ** 2 + 0.60D2 * cos(a * x) * cos(b * y) * sin(a * x) * sin(b * y) - 0.896D3 * D * a * sin(b * y)* cos(a * x) - 0.120D3 * sin(a * x) * a * cos(b * y) * x + 0.60D2 * cos(a * x) ** 2 * a * sin(b * y) * cos(b * y) * x ** 2 + 0.60D2 * sin(a * x) * a * cos(b * y) * x * y ** 2 + 0.90D2 * cos(a *x) * cos(b * y) * x * sin(a * x) * sin(b * y) - 0.30D2 * cos(a * x) * cos(b * y) * sin(a * x) * sin(b * y) * y ** 2 + 0.30D2 * cos(a * x) * cos(b * y) * x ** 2 * sin(a * x) * sin(b * y) + 0.896D3 * D * a ** 2 * sin(b * y) * sin(a * x) * x + 0.6D1 * D * a *sin(b * y) * cos(a * x) * x ** 2 + 0.10D2 * D * a * sin(b * y) * cos(a * x) * x - D * a ** 2 * sin(b * y) * sin(a * x) * x ** 3 - 0.4D1 * D * a ** 2 * sin(b * y) * sin(a * x) * x ** 2 + D * a *sin(b * y) * cos(a * x) * y ** 4 - 0.4D1 * D * a * sin(b * y) *cos(a * x) * y ** 2 + D * a * sin(b * y) * cos(a * x) * x ** 3 +0.120D3 * cos(a * x) ** 2 * a * sin(b * y) * cos(b * y) * x + 0.180D3 * cos(a * x) * cos(b * y) * x - 0.60D2 * cos(a * x) * cos(b * y) * y ** 2 + 0.60D2 * cos(a * x) * cos(b * y) * x ** 2 - 0.60D2 * cos(a * x) ** 2 * a * sin(b * y) * cos(b * y) * x * y ** 2 - 0.7D1 * D * a * sin(b * y) * cos(a * x) * x * y ** 2 + 0.2D1 * D * a ** 2 * sin(b * y) * sin(a * x) * x ** 2 * y ** 2 - D * a ** 2 * sin(b * y) * sin(a * x) * x * y ** 4 + 0.4D1 * D * a ** 2 * sin(b * y) * sin(a * x) * x * y ** 2 - 0.3D1 * D * a * sin(b * y) * cos(a * x) * x ** 2 * y ** 2 + 0.30D2 * a * sin(b * y) * cos(b * y) * x * y ** 2 - 0.30D2 * a * sin(b * y) * cos(b * y) * x ** 2 - 0.60D2 * a * cos(b * y) * x * sin(b * y)) / 0.900D3

									f(:,2) =  0.1D1 / dble(x) * (-dble(40 * a * x) + 0.120D3 * cos(dble(a* x)) ** 2 * cos(b * y) ** 2 - 0.60D2 * cos(dble(a * x)) ** 2 * cos(b * y) ** 2 * y ** 2 - dble(20 * a * x ** 2) + 0.180D3 * cos(dble(a * x)) ** 2 * cos(b * y) ** 2 * dble(x) + 0.20D2 * dble(a) * dble(x) * y ** 2 - 0.6D1 * mu * dble(a) * cos(b * y) * cos(dble(a * x)) ** 2 * sin(b * y) * dble(x ** 2) * y ** 2 - 0.4D1 * mu *dble(a ** 2) * cos(b * y) * cos(dble(a * x)) * dble(x ** 3) * sin(dble(a * x)) * sin(b * y) - 0.16D2 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x)) * dble(x ** 2) * sin(dble(a * x)) * sin(b* y) - 0.14D2 * mu * dble(a) * cos(b * y) * cos(dble(a * x)) **2 * sin(b * y) * dble(x) * y ** 2 + 0.3584D4 * mu * dble(a ** 2)* cos(b * y) * cos(dble(a * x)) * sin(b * y) * sin(dble(a * x))* dble(x) - 0.160D3 * cos(dble(a * x)) * cos(b * y) ** 2 * sin(dble(a * x)) * dble(a) * dble(x) + 0.60D2 * cos(dble(a * x)) ** 3 *dble(a) * sin(b * y) * cos(b * y) ** 2 * dble(x ** 2) - 0.80D2 * cos(dble(a * x)) * cos(b * y) ** 2 * sin(dble(a * x)) * dble(a)* dble(x ** 2) + 0.90D2 * cos(dble(a * x)) ** 2 * cos(b * y) ** 2 * dble(x) * sin(dble(a * x)) * sin(b * y) - 0.30D2 * cos(dble(a* x)) ** 2 * cos(b * y) ** 2 * sin(dble(a * x)) * sin(b * y) * y ** 2 + 0.30D2 * cos(dble(a * x)) ** 2 * cos(b * y) ** 2 * dble(x ** 2) * sin(dble(a * x)) * sin(b * y) - 0.400D3 * dble(a) * dble(x) * y ** 2 * cos(dble(a * x)) * sin(b * y) + 0.40D2 * dble(a) * dble(x) * sin(dble(a * x)) * sin(b * y) * y ** 2 - 0.1792D4 * mu * dble(a) * cos(b * y) * cos(dble(a * x)) ** 2 * sin(b * y) - 0.12D2 * mu * dble(a) * cos(b * y) * sin(dble(a * x)) * dble(x **2) - 0.20D2 * mu * dble(a) * cos(b * y) * sin(dble(a * x)) * dble(x) - 0.2D1 * mu * dble(a) * cos(b * y) * y ** 4 * sin(dble(a * x)) + 0.8D1 * mu * dble(a) * cos(b * y) * y ** 2 * sin(dble(a * x)) + 0.1792D4 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x))* dble(x) - 0.2D1 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x)) * dble(x ** 3) - 0.8D1 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x)) * dble(x ** 2) - 0.2D1 * mu * dble(a) * cos(b * y) * sin(dble(a * x)) * dble(x ** 3) + 0.120D3 * cos(dble(a * x)) ** 3 * dble(a) * sin(b * y) * cos(b * y) ** 2 * dble(x) + 0.60D2 * cos(dble(a * x)) ** 2 * cos(b * y) ** 2 * dble(x ** 2) - 0.60D2* cos(dble(a * x)) ** 3 * dble(a) * sin(b * y) * cos(b * y) ** 2 * dble(x) * y ** 2 + 0.80D2 * cos(dble(a * x)) * cos(b * y) ** 2 * sin(dble(a * x)) * dble(a) * dble(x) * y ** 2 + 0.4D1 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x)) * dble(x ** 2) * y **2 - 0.2D1 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x)) * dble(x) * y ** 4 + 0.8D1 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x)) * dble(x) * y ** 2 + 0.12D2 * mu * dble(a) * cos(b * y) * cos(dble(a * x)) ** 2 * sin(b * y) * dble(x ** 2) + 0.14D2 *mu * dble(a) * cos(b * y) * sin(dble(a * x)) * dble(x) * y ** 2 + 0.20D2 * mu * dble(a) * cos(b * y) * cos(dble(a * x)) ** 2 * sin(b * y) * dble(x) + 0.2D1 * mu * dble(a) * cos(b * y) * y ** 4 * cos(dble(a * x)) ** 2 * sin(b * y) - 0.8D1 * mu * dble(a) * cos(b * y) * y ** 2 * cos(dble(a * x)) ** 2 * sin(b * y) + 0.2D1 * mu * dble(a) * cos(b * y) * cos(dble(a * x)) ** 2 * sin(b * y) *dble(x ** 3) + 0.6D1 * mu * dble(a) * cos(b * y) * sin(dble(a * x)) * dble(x ** 2) * y ** 2 + 0.60D2 * cos(dble(a * x)) ** 2 * cos(b * y) ** 2 * sin(dble(a * x)) * sin(b * y) + 0.400D3 * dble(a)* dble(x ** 2) * cos(dble(a * x)) * sin(b * y) - 0.40D2 * dble(a) * dble(x ** 2) * sin(dble(a * x)) * sin(b * y) + 0.800D3 * dble(a) * dble(x) * cos(dble(a * x)) * sin(b * y) - 0.80D2 * dble(a) * dble(x) * sin(dble(a * x)) * sin(b * y) + 0.1792D4 * mu * dble(a) * cos(b * y) * sin(dble(a * x)) + 0.8D1 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x)) * dble(x ** 2) * y ** 2 * sin(dble(a * x)) * sin(b * y) - 0.4D1 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x)) * dble(x) * y ** 4 * sin(dble(a * x)) * sin(b * y) + 0.16D2 * mu * dble(a ** 2) * cos(b * y) * cos(dble(a * x)) *dble(x) * sin(dble(a * x)) * sin(b * y) * y ** 2 + 0.3D1 * mu * dble(a) * cos(b * y) * sin(b * y) * dble(x ** 2) * y ** 2 + 0.7D1 * mu * dble(a) * cos(b * y) * sin(b * y) * dble(x) * y ** 2 + 0.896D3 * mu * dble(a) * cos(b * y) * sin(b * y) - 0.6D1 * mu * dble(a) * cos(b * y) * sin(b * y) * dble(x ** 2) - 0.10D2 * mu *dble(a) * cos(b * y) * sin(b * y) * dble(x) - mu * dble(a) * cos(b * y) * y ** 4 * sin(b * y) + 0.4D1 * mu * dble(a) * cos(b * y) * y ** 2 * sin(b * y) - mu * dble(a) * cos(b * y) * sin(b * y) * dble(x ** 3) + 0.20D2 * dble(a) * dble(x ** 2) * cos(b * y)** 2 + 0.40D2 * dble(a) * dble(x) * cos(b * y) ** 2 + 0.40D2 * dble(a) * dble(x ** 2) * cos(dble(a * x)) ** 2 + 0.80D2 * dble(a) *dble(x) * cos(dble(a * x)) ** 2 - 0.40D2 * dble(a) * dble(x ** 2)* cos(dble(a * x)) ** 2 * cos(b * y) ** 2 - 0.80D2 * dble(a) * dble(x) * cos(dble(a * x)) ** 2 * cos(b * y) ** 2 - 0.20D2 * dble(a) * dble(x) * y ** 2 * cos(b * y) ** 2 - 0.40D2 * dble(a) * dble(x) * y ** 2 * cos(dble(a * x)) ** 2 + 0.40D2 * dble(a) * dble(x) * y ** 2 * cos(dble(a * x)) ** 2 * cos(b * y) ** 2 - 0.40D2 * cos(dble(a * x)) * cos(b * y) ** 2 * dble(a) * dble(x ** 2) * sin(b * y) - 0.80D2 * cos(dble(a * x)) * cos(b * y) ** 2 * dble(a) * dble(x) * sin(b * y) + 0.40D2 * cos(dble(a * x)) * cos(b * y) ** 2 * dble(a) * dble(x) * sin(b * y) * y ** 2) / 0.900D3

       f(:,3) =  (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y) + 0.2D1 / 0.3D1 * cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a)) * cos(a * x) * cos(b * y) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) - ((0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y)) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a* x) ** 2 * cos(b * y) ** 2 / 0.2D1)) * sin(a * x) * a * cos(b *y) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) + ((0.2D1 +sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y)) +0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1)) * cos(a * x) * cos(b * y) / 0.30D2 + ((0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y)) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1)) * cos(a * x) * cos(b * y) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) / x + ((0.2D1 + sin(a * x) * sin(b * y)) * (0.20D2 + cos(a * x) *sin(b * y)) + 0.2D1 / 0.3D1 * (0.2D1 + sin(a * x) * sin(b * y))* (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1)) * cos(a * x) * cos(b * y) * (x / 0.30D2 + 0.1D1 / 0.30D2) - csi * (-sin(a * x) * a ** 2 * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - 0.2D1 * cos(a * x) * a ** 2 * sin(b * y) ** 2 * sin(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * a ** 2 * sin(b * y) - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a *x) * sin(b * y)) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y)) / 0.15D2 - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) ** 2 * (-sin(a * x) * a ** 2 * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - 0.2D1 * cos(a * x) * a ** 2 * sin(b * y) ** 2 * sin(a * x) - (0.2D1 + sin(a * x) * sin(b * y)) * cos(a * x) * a ** 2 * sin(b * y)) + (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y) - (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) ** 2 * (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y))) / x - (x / 0.30D2 + 0.1D1 / 0.30D2) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y)) + (x * y / 0.30D2 + y / 0.30D2) * y * (cos(a * x) * a * sin(b * y) * (0.20D2 + cos(a * x) * sin(b * y)) - (0.2D1 + sin(a * x) * sin(b * y)) * sin(a * x) * a * sin(b * y)) / 0.15D2) - kpar * (((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * epn * (-sin(a * x) * a * sin(b* y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) ** 2 / (0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) ** 2 / Mref / 0.3D1 + ((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref / 0.45D2 + ((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 *cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) ** 2 * (-cos(a * x) * a ** 2 * sin(b * y) - sin(a * x) ** 2 * a ** 2 * cos(b * y) ** 2 + cos(a *x) ** 2 * cos(b * y) ** 2 * a ** 2) / Mref / 0.3D1 + ((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) ** 2 * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref / x / 0.3D1 - ((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * y * (-sin(a * x) * a * sin(b * y) +cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref * (x * y /0.30D2 + y / 0.30D2) / 0.45D2 + ((0.20D2 + cos(a * x) * sin(b * y) - cos(a * x) ** 2 * cos(b * y) ** 2 / 0.2D1) / Mref / 0.3D1) ** epn * (x / 0.30D2 - y ** 2 / 0.30D2 + 0.1D1 / 0.15D2) * (-sin(a * x) * a * sin(b * y) + cos(a * x) * cos(b * y) ** 2 * sin(a * x) * a) / Mref * (x / 0.30D2 + 0.1D1 / 0.30D2) / 0.3D1)

				  CASE(50:)
				  ! Do nothing

				  CASE DEFAULT
				      WRITE(6,*) "Error! Test case not valid"
				      STOP
			
				END SELECT
  END SUBROUTINE body_force
  
END MODULE analytical
