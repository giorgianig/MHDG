!*****************************************
! project: MHDG
! file: analytical.f90
! date: 15/02/2017
!  ******** N-Gamma system Isothermal ****
! Define the analytical solution and the 
! body forces for different cases
!*****************************************
MODULE analytical
  USE prec_const
  USE globals, ONLY: switch
  USE physics
  USE PrintUtils
  IMPLICIT NONE
  
  CONTAINS
  
		!*****************************************
		! Analytical solution 
		!**************************************** 
  SUBROUTINE analytical_solution(x,y,u)
  real*8, dimension(:), intent(IN)        :: x,y
  real*8, dimension(:,:), intent(OUT)     :: u
  real*8, dimension(size(u,1),size(u,2))  :: up
  integer:: i
  real*8 :: a,r(size(x))
  
  up = 0.
  a = 2*pi
				SELECT CASE(switch%testcase)
				  CASE(1)
				  				IF (switch%axisym) THEN
						      WRITE(6,*) "This is NOT an axisymmetric test case!"
						      stop
						   END IF
				  ! Circular field centered in [xc, yc], n = 2+sin(a*x)*sin(a*y),  u = cos(a*x)*cos(a*y)
				  ! Case 9 of the Matlab version: for convergence purpose
								  up(:,1) = 2+sin(a*x)*sin(a*y)
								  up(:,2) = cos(a*x)*cos(a*y)
						CASE(2)
						! Axisimmetric case with div(b)~=0
						   IF (.not.switch%axisym) THEN
						      WRITE(6,*) "This is an axisymmetric test case!"
						      stop
						   END IF 
								  up(:,1) = 2+sin(a*x)*sin(a*y)
								  up(:,2) = cos(a*x)*cos(a*y)
				  CASE(50:64)
				      up(:,1) = 1.
				      up(:,2) = 0.
				  CASE(50:64)
				      up(:,1) = 1.
				      up(:,2) = 0.
				      r = 	sqrt ( (x*phys%lscale-geom%R0)**2 + (y*phys%lscale-0.75)**2 )
				      DO i=1,size(x)
				         IF (r(i).le. 0.05) THEN
				            up(i,2) = 1.
				         END IF
				      END DO			      
				  CASE DEFAULT
				      WRITE(6,*) "Error! Test case not valid"
				      STOP
				END SELECT
				! Convert physical variables to conservative variables
				CALL phys2cons(up,u)
  END SUBROUTINE analytical_solution


		!*****************************************
		! Body forces
		!**************************************** 
  SUBROUTINE body_force(x,y,f)
  real*8, dimension(:), intent(IN) :: x,y
  real*8, dimension(:,:), intent(OUT) :: f
  integer                            :: i, n
  real*8  :: a,b,xc,yc,D,mu,k
  
  n = size(x)
  
    f = 0.
				SELECT CASE(switch%testcase)
				  CASE(1)
				  ! Circular field centered in [xc, yc], n = 2+sin(2*pi*x)*sin(2*pi*y),  u = cos(2*pi*x)*cos(2*pi*y)
				  ! Case 9 of the Matlab version: for convergence purpose
				  a = 2*pi
				  b = 2*pi
				  xc = 0.
				  yc = 0.
				  D = phys%diff_n
				  mu = phys%diff_u
				  k = phys%a
               f(:,1) = cos(a * x)**2 * a  * sin(b * y) * cos(b * y) * (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) / 0.10e2 - (0.2e1 + sin(a * x) * sin(b * y)) * sin(a * x) * a  * cos(b * y) * (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) / 0.10e2 - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * (0.2e1 * x - 0.2e1 * xc) / 0.20e2 + sin(a * x) * cos(b * y)**2 * b * cos(a * x) * (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) / 0.10e2 - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b * (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) / 0.10e2 - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * (0.2e1 * y - 0.2e1 * yc) / 0.20e2 - D * (-sin(a * x) * a**2 * sin(b * y) + (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * ((y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * cos(a * x) * a  * sin(b * y) / 0.10e2 + (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * sin(a * x) * cos(b * y) * b / 0.10e2) * (0.2e1 * x - 0.2e1 * xc) / 0.20e2 - (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (-(y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * cos(a * x) * a  * sin(b * y) * (0.2e1 * x - 0.2e1 * xc) / 0.20e2 - (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * sin(a * x) * a**2 * sin(b * y) / 0.10e2 - (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * sin(a * x) * cos(b * y) * b / 0.10e2 - (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * sin(a * x) * cos(b * y) * b * (0.2e1 * x - 0.2e1 * xc) / 0.20e2 + (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * cos(a * x) * a  * cos(b * y) * b / 0.10e2) / 0.10e2 - sin(a * x) * sin(b * y) * b**2 + (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * ((y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * cos(a * x) * a  * sin(b * y) / 0.10e2 + (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * sin(a * x) * cos(b * y) * b / 0.10e2) * (0.2e1 * y - 0.2e1 * yc) / 0.20e2 - (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * ((y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * cos(a * x) * a  * sin(b * y) / 0.10e2 - (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * cos(a * x) * a  * sin(b * y) * (0.2e1 * y - 0.2e1 * yc) / 0.20e2 + (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * cos(a * x) * a  * cos(b * y) * b / 0.10e2 - (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * sin(a * x) * cos(b * y) * b * (0.2e1 * y - 0.2e1 * yc) / 0.20e2 - (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * sin(a * x) * sin(b * y) * b**2 / 0.10e2) / 0.10e2)
            f(:,2) = cos(a * x)**3 * a  * sin(b * y) * cos(b * y)**2 * (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) / 0.10e2 - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y)**2 * (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * sin(a * x) * a  / 0.5e1 - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x)**2 * cos(b * y)**2 * (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * (0.2e1 * x - 0.2e1 * xc) / 0.20e2 + sin(a * x) * cos(b * y)**3 * b * cos(a * x)**2 * (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) / 0.10e2 - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x)**2 * cos(b * y) * (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * sin(b * y) * b / 0.5e1 - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x)**2 * cos(b * y)**2 * (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * (0.2e1 * y - 0.2e1 * yc) / 0.20e2 + k * (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * cos(a * x) * a  * sin(b * y) / 0.10e2 + k * (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * sin(a * x) * cos(b * y) * b / 0.10e2 - mu * (-0.3e1 * cos(a * x) * a**2 * sin(b * y) * cos(b * y) * sin(a * x) - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * a**2 * cos(b * y) + (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * ((y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (cos(a * x)**2 * a  * sin(b * y) * cos(b * y) - (0.2e1 + sin(a * x) * sin(b * y)) * sin(a * x) * a  * cos(b * y)) / 0.10e2 + (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (sin(a * x) * cos(b * y)**2 * b * cos(a * x) - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b) / 0.10e2) * (0.2e1 * x - 0.2e1 * xc) / 0.20e2 - (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (-(y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * (cos(a * x)**2 * a  * sin(b * y) * cos(b * y) - (0.2e1 + sin(a * x) * sin(b * y)) * sin(a * x) * a  * cos(b * y)) * (0.2e1 * x - 0.2e1 * xc) / 0.20e2 + (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (-0.3e1 * cos(a * x) * a**2 * sin(b * y) * cos(b * y) * sin(a * x) - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * a**2 * cos(b * y)) / 0.10e2 - (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (sin(a * x) * cos(b * y)**2 * b * cos(a * x) - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b) / 0.10e2 - (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * (sin(a * x) * cos(b * y)**2 * b * cos(a * x) - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b) * (0.2e1 * x - 0.2e1 * xc) / 0.20e2 + (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (cos(a * x)**2 * a  * cos(b * y)**2 * b - sin(a * x)**2 * cos(b * y)**2 * b * a  - cos(a * x)**2 * a  * sin(b * y)**2 * b + (0.2e1 + sin(a * x) * sin(b * y)) * sin(a * x) * a  * sin(b * y) * b) / 0.10e2) / 0.10e2 - 0.3e1 * sin(a * x) * cos(b * y) * b**2 * cos(a * x) * sin(b * y) - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * b**2 + (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * ((y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (cos(a * x)**2 * a  * sin(b * y) * cos(b * y) - (0.2e1 + sin(a * x) * sin(b * y)) * sin(a * x) * a  * cos(b * y)) / 0.10e2 + (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (sin(a * x) * cos(b * y)**2 * b * cos(a * x) - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b) / 0.10e2) * (0.2e1 * y - 0.2e1 * yc) / 0.20e2 - (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * ((y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (cos(a * x)**2 * a  * sin(b * y) * cos(b * y) - (0.2e1 + sin(a * x) * sin(b * y)) * sin(a * x) * a  * cos(b * y)) / 0.10e2 - (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * (cos(a * x)**2 * a  * sin(b * y) * cos(b * y) - (0.2e1 + sin(a * x) * sin(b * y)) * sin(a * x) * a  * cos(b * y)) * (0.2e1 * y - 0.2e1 * yc) / 0.20e2 + (y - yc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (cos(a * x)**2 * a  * cos(b * y)**2 * b - sin(a * x)**2 * cos(b * y)**2 * b * a  - cos(a * x)**2 * a  * sin(b * y)**2 * b + (0.2e1 + sin(a * x) * sin(b * y)) * sin(a * x) * a  * sin(b * y) * b) / 0.10e2 - (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.3e1 / 0.2e1) * (sin(a * x) * cos(b * y)**2 * b * cos(a * x) - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * sin(b * y) * b) * (0.2e1 * y - 0.2e1 * yc) / 0.20e2 + (-x + xc) * (y**2 - 0.2e1 * y * yc + yc**2 + x**2 - 0.2e1 * x * xc + xc**2)**(-0.1e1 / 0.2e1) * (-0.3e1 * sin(a * x) * cos(b * y) * b**2 * cos(a * x) * sin(b * y) - (0.2e1 + sin(a * x) * sin(b * y)) * cos(a * x) * cos(b * y) * b**2) / 0.10e2) / 0.10e2)
      CASE(2)
						! Axisimmetric case with div(b)~=0
						   IF (.not.switch%axisym) THEN
						      WRITE(6,*) "This is an axisymmetric test case!"
						      stop
						   END IF
									a = 2*pi
									b = 2*pi
									xc = 0.
									yc = 0.
									D = phys%diff_n
									mu = phys%diff_u
									k = phys%a
									f(:,1) = 0.
									f(:,2) = 0.						         
				  CASE(50:)
				  ! Do nothing
!				  CASE(51)! Big hole
!				       DO i=1,n
!				          IF (mflux(i).le.-0.90 .or. mflux(i).ge.-0.92) THEN
!				             f(i,1) = 3.81573287190317e-05
!				          END IF
!				       END DO
!      CASE(52) ! Small hole
!				       DO i=1,n
!				          IF (mflux(i).le.-0.90 .or. mflux(i).ge.-1.) THEN
!				             f(i,1) = 9.45155008295538e-06
!				          END IF
!				       END DO    
!      CASE(53) ! No hole
!				       DO i=1,n
!				          IF (mflux(i).le.-0.90) THEN
!				             f(i,1) = 7.24032211339971e-06
!				          END IF
!				       END DO     
!      CASE(54)
!				       DO i=1,n
!				          IF (mflux(i).le.-0.98 .or. mflux(i).ge.-1.) THEN
!				             f(i,1) = 5.78723047118297e-05
!				          END IF
!				       END DO     
!      CASE(55)
!				       DO i=1,n
!				          IF (mflux(i).le.-1.03) THEN
!				             f(i,1) = 0.000115575293741846	
!				          END IF
!				       END DO    
!				   CASE(56:) 
				    !Do nothing
				  CASE DEFAULT
				      WRITE(6,*) "Error! Test case not valid"
				      STOP
			
				END SELECT
  END SUBROUTINE body_force
  
END MODULE analytical
